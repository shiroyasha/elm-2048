Elm.ElmTest = Elm.ElmTest || {};
Elm.ElmTest.Runner = Elm.ElmTest.Runner || {};
Elm.ElmTest.Runner.Console = Elm.ElmTest.Runner.Console || {};
Elm.ElmTest.Runner.Console.make = function (_elm) {
   "use strict";
   _elm.ElmTest = _elm.ElmTest || {};
   _elm.ElmTest.Runner = _elm.ElmTest.Runner || {};
   _elm.ElmTest.Runner.Console = _elm.ElmTest.Runner.Console || {};
   if (_elm.ElmTest.Runner.Console.values)
   return _elm.ElmTest.Runner.Console.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "ElmTest.Runner.Console",
   $Basics = Elm.Basics.make(_elm),
   $ElmTest$Run = Elm.ElmTest.Run.make(_elm),
   $ElmTest$Runner$String = Elm.ElmTest.Runner.String.make(_elm),
   $ElmTest$Test = Elm.ElmTest.Test.make(_elm),
   $IO$IO = Elm.IO.IO.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var runDisplay = function (tests) {
      return function () {
         var _ = $ElmTest$Runner$String.run(tests);
         var allPassed = function () {
            switch (_.ctor)
            {case "::": switch (_._0.ctor)
                 {case "_Tuple2":
                    return _._0._1;}
                 break;}
            _U.badCase($moduleName,
            "on line 25, column 45 to 61");
         }();
         var results = function () {
            switch (_.ctor)
            {case "::": switch (_._0.ctor)
                 {case "_Tuple2": return _._1;}
                 break;}
            _U.badCase($moduleName,
            "on line 25, column 45 to 61");
         }();
         var summary = function () {
            switch (_.ctor)
            {case "::": switch (_._0.ctor)
                 {case "_Tuple2":
                    return _._0._0;}
                 break;}
            _U.badCase($moduleName,
            "on line 25, column 45 to 61");
         }();
         var out = A2($Basics._op["++"],
         summary,
         A2($Basics._op["++"],
         "\n\n",
         $String.concat($List.intersperse("\n")($List.map($Basics.fst)(results)))));
         return A2($IO$IO._op[">>>"],
         $IO$IO.putStrLn(out),
         function () {
            var _v15 = $ElmTest$Run.pass(allPassed);
            switch (_v15)
            {case false:
               return $IO$IO.exit(1);
               case true:
               return $IO$IO.exit(0);}
            _U.badCase($moduleName,
            "between lines 28 and 30");
         }());
      }();
   };
   _elm.ElmTest.Runner.Console.values = {_op: _op
                                        ,runDisplay: runDisplay};
   return _elm.ElmTest.Runner.Console.values;
};