Elm.Shapes = Elm.Shapes || {};
Elm.Shapes.make = function (_elm) {
   "use strict";
   _elm.Shapes = _elm.Shapes || {};
   if (_elm.Shapes.values)
   return _elm.Shapes.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Shapes",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Units = Elm.Units.make(_elm);
   var roundedRect = F3(function (_v0,
   radius,
   color) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return function () {
                 var circleShapes = A2($List.repeat,
                 4,
                 $Graphics$Collage.circle(radius));
                 var circleForms = A2($List.map,
                 $Graphics$Collage.filled(color),
                 circleShapes);
                 var innerHeight = _v0._1 - radius * 2;
                 var innerWidth = _v0._0 - radius * 2;
                 var circlePositions = _L.fromArray([{ctor: "_Tuple2"
                                                     ,_0: innerWidth / 2
                                                     ,_1: innerHeight / 2}
                                                    ,{ctor: "_Tuple2"
                                                     ,_0: (0 - innerWidth) / 2
                                                     ,_1: innerHeight / 2}
                                                    ,{ctor: "_Tuple2"
                                                     ,_0: innerWidth / 2
                                                     ,_1: (0 - innerHeight) / 2}
                                                    ,{ctor: "_Tuple2"
                                                     ,_0: (0 - innerWidth) / 2
                                                     ,_1: (0 - innerHeight) / 2}]);
                 var circles = A3($List.map2,
                 $Graphics$Collage.move,
                 circlePositions,
                 circleForms);
                 var borderPositions = _L.fromArray([{ctor: "_Tuple2"
                                                     ,_0: 0
                                                     ,_1: innerHeight / 2}
                                                    ,{ctor: "_Tuple2"
                                                     ,_0: 0
                                                     ,_1: (0 - innerHeight) / 2}
                                                    ,{ctor: "_Tuple2"
                                                     ,_0: innerWidth / 2
                                                     ,_1: 0}
                                                    ,{ctor: "_Tuple2"
                                                     ,_0: (0 - innerWidth) / 2
                                                     ,_1: 0}]);
                 var borderShapes = _L.fromArray([A2($Graphics$Collage.rect,
                                                 innerWidth,
                                                 radius * 2)
                                                 ,A2($Graphics$Collage.rect,
                                                 innerWidth,
                                                 radius * 2)
                                                 ,A2($Graphics$Collage.rect,
                                                 radius * 2,
                                                 innerHeight)
                                                 ,A2($Graphics$Collage.rect,
                                                 radius * 2,
                                                 innerHeight)]);
                 var borderForms = A2($List.map,
                 $Graphics$Collage.filled(color),
                 borderShapes);
                 var borders = A3($List.map2,
                 $Graphics$Collage.move,
                 borderPositions,
                 borderForms);
                 var innerRect = $Graphics$Collage.filled(color)(A2($Graphics$Collage.rect,
                 innerWidth,
                 innerHeight));
                 return $Graphics$Collage.group(A2($List._op["::"],
                 innerRect,
                 $List.concat(_L.fromArray([circles
                                           ,borders]))));
              }();}
         _U.badCase($moduleName,
         "between lines 79 and 111");
      }();
   });
   var roundedSquare = F3(function (size,
   radius,
   color) {
      return A3(roundedRect,
      {ctor: "_Tuple2"
      ,_0: size
      ,_1: size},
      radius,
      color);
   });
   var labelSize = F2(function (cellSize,
   number) {
      return _U.cmp(number,
      100) < 0 ? cellSize / 2 : _U.cmp(number,
      100) > 0 && _U.cmp(number,
      1000) < 0 ? cellSize / 2.5 : _U.cmp(number,
      1000) > 0 ? cellSize / 3 : _U.badIf($moduleName,
      "between lines 68 and 70");
   });
   var textColor = function (number) {
      return function () {
         switch (number)
         {case 2: return A3($Color.rgb,
              120,
              110,
              101);
            case 4: return A3($Color.rgb,
              120,
              110,
              101);}
         return $Color.white;
      }();
   };
   var label = F2(function (size,
   number) {
      return $Graphics$Collage.move({ctor: "_Tuple2"
                                    ,_0: 0
                                    ,_1: 7})($Graphics$Collage.text($Text.bold($Text.height(size)($Text.color(textColor(number))($Text.fromString(_U.cmp(number,
      0) > 0 ? $Basics.toString(number) : ""))))));
   });
   var backgroungColor = function (number) {
      return function () {
         switch (number)
         {case 0: return A3($Color.rgb,
              204,
              192,
              179);
            case 2: return A3($Color.rgb,
              238,
              228,
              218);
            case 4: return A3($Color.rgb,
              236,
              224,
              200);
            case 8: return A3($Color.rgb,
              241,
              176,
              120);
            case 16: return A3($Color.rgb,
              235,
              140,
              82);
            case 32: return A3($Color.rgb,
              243,
              123,
              96);
            case 64: return A3($Color.rgb,
              233,
              89,
              55);
            case 128: return A3($Color.rgb,
              242,
              216,
              106);
            case 256: return A3($Color.rgb,
              231,
              191,
              41);
            case 512: return A3($Color.rgb,
              231,
              191,
              41);
            case 1024: return A3($Color.rgb,
              228,
              183,
              19);
            case 2048: return A3($Color.rgb,
              238,
              195,
              3);}
         _U.badCase($moduleName,
         "between lines 32 and 44");
      }();
   };
   var cell = F2(function (size,
   number) {
      return function () {
         var fg = A2(label,
         A2(labelSize,size,number),
         number);
         var bg = A3(roundedSquare,
         size,
         3,
         backgroungColor(number));
         return $Graphics$Collage.group(_L.fromArray([bg
                                                     ,fg]));
      }();
   });
   var cellBase = function (size) {
      return A3(roundedSquare,
      size,
      3,
      backgroungColor(0));
   };
   var gridBackground = function (size) {
      return A3(roundedRect,
      size,
      3,
      A3($Color.rgb,187,173,160));
   };
   _elm.Shapes.values = {_op: _op
                        ,gridBackground: gridBackground
                        ,cellBase: cellBase
                        ,cell: cell
                        ,backgroungColor: backgroungColor
                        ,textColor: textColor
                        ,label: label
                        ,labelSize: labelSize
                        ,roundedSquare: roundedSquare
                        ,roundedRect: roundedRect};
   return _elm.Shapes.values;
};