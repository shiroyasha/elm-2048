Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Config = Elm.Config.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Matrix = Elm.Matrix.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Views$Grid = Elm.Views.Grid.make(_elm);
   var view = function (model) {
      return A2($Views$Grid.render,
      $Config.defaultConfig,
      A2($Debug.watch,
      "Game State",
      model));
   };
   var sumTheSame = function (list) {
      return function () {
         var firstTwoTheSame = function (list) {
            return _U.eq(A2($List.take,
            1,
            list),
            $List.drop(1)($List.take(2)(list)));
         };
         return _U.eq($List.length(list),
         0) ? list : _U.eq($List.length(list),
         1) ? list : _U.cmp($List.length(list),
         2) > -1 && firstTwoTheSame(list) ? sumTheSame(A2($List._op["::"],
         $List.sum($List.take(2)(list)),
         A2($List.drop,
         2,
         list))) : A2($List._op["::"],
         $List.sum($List.take(1)(list)),
         sumTheSame(A2($List.drop,
         1,
         list)));
      }();
   };
   var squashRowLeft = function (list) {
      return function () {
         var numbers = sumTheSame(A2($List.filter,
         function (x) {
            return !_U.eq(x,0);
         },
         list));
         var numberOfZeroes = $List.length(list) - $List.length(numbers);
         return $List.concat(_L.fromArray([numbers
                                          ,A2($List.repeat,
                                          numberOfZeroes,
                                          0)]));
      }();
   };
   var squashRowRight = function ($) {
      return $List.reverse(squashRowLeft($List.reverse($)));
   };
   var squashRight = function ($) {
      return $Matrix.fromList($List.map(squashRowRight)($Matrix.toList($)));
   };
   var squashUp = function ($) {
      return $Matrix.transpose(squashRight($Matrix.transpose($)));
   };
   var squashLeft = function ($) {
      return $Matrix.fromList($List.map(squashRowLeft)($Matrix.toList($)));
   };
   var squashDown = function ($) {
      return $Matrix.transpose(squashLeft($Matrix.transpose($)));
   };
   var moveCells = function (input) {
      return function () {
         var _v0 = {ctor: "_Tuple2"
                   ,_0: input.x
                   ,_1: input.y};
         switch (_v0.ctor)
         {case "_Tuple2": switch (_v0._0)
              {case -1: switch (_v0._1)
                   {case 0: return squashLeft;}
                   break;
                 case 0: switch (_v0._1)
                   {case -1: return squashDown;
                      case 1: return squashUp;}
                   break;
                 case 1: switch (_v0._1)
                   {case 0: return squashRight;}
                   break;}
              break;}
         return $Basics.identity;
      }();
   };
   var update = F2(function (input,
   model) {
      return A3($Matrix.set,
      0,
      0,
      2)(moveCells(input)(model));
   });
   var defaultGrid = F2(function (rows,
   cols) {
      return A3($Matrix.set,
      1,
      2,
      8)(A3($Matrix.set,
      1,
      1,
      2)(A3($Matrix.set,
      3,
      2,
      4)(A3($Matrix.set,
      3,
      1,
      2)(A3($Matrix.repeat,
      rows,
      cols,
      0)))));
   });
   var gameState = A3($Signal.foldp,
   update,
   A2(defaultGrid,4,4),
   $Keyboard.arrows);
   var main = A2($Signal.map,
   view,
   gameState);
   _elm.Main.values = {_op: _op
                      ,defaultGrid: defaultGrid
                      ,sumTheSame: sumTheSame
                      ,squashRowLeft: squashRowLeft
                      ,squashRowRight: squashRowRight
                      ,squashLeft: squashLeft
                      ,squashRight: squashRight
                      ,squashDown: squashDown
                      ,squashUp: squashUp
                      ,moveCells: moveCells
                      ,update: update
                      ,gameState: gameState
                      ,view: view
                      ,main: main};
   return _elm.Main.values;
};