Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Config = Elm.Config.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Matrix = Elm.Matrix.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Models$Grid = Elm.Models.Grid.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Views$Grid = Elm.Views.Grid.make(_elm);
   var view = function (_v0) {
      return function () {
         return A2($Views$Grid.render,
         $Config.defaultConfig,
         A2($Debug.watch,
         "Number Grid",
         _v0.grid));
      }();
   };
   var randomEmptyPosition = F2(function (randomNumber,
   grid) {
      return function () {
         var emptyPositions = $List.filter(function (_v2) {
            return function () {
               switch (_v2.ctor)
               {case "_Tuple3":
                  return _U.eq(_v2._2,0);}
               _U.badCase($moduleName,
               "on line 89, column 86 to 97");
            }();
         })($Matrix.toIndexedList(grid));
         return $List.head($List.drop(A2($Basics._op["%"],
         randomNumber,
         $List.length(emptyPositions)))(emptyPositions));
      }();
   });
   var movement = function (_v7) {
      return function () {
         return A2($List.member,
         {ctor: "_Tuple2"
         ,_0: _v7.x
         ,_1: _v7.y},
         _L.fromArray([{ctor: "_Tuple2"
                       ,_0: 1
                       ,_1: 0}
                      ,{ctor: "_Tuple2",_0: -1,_1: 0}
                      ,{ctor: "_Tuple2",_0: 0,_1: -1}
                      ,{ctor: "_Tuple2"
                       ,_0: 0
                       ,_1: 1}]));
      }();
   };
   var Direction = F2(function (a,
   b) {
      return {_: {},x: a,y: b};
   });
   var sumTheSame = function (list) {
      return function () {
         var firstTwoTheSame = function (list) {
            return _U.eq(A2($List.take,
            1,
            list),
            $List.drop(1)($List.take(2)(list)));
         };
         return _U.eq($List.length(list),
         0) ? list : _U.eq($List.length(list),
         1) ? list : _U.cmp($List.length(list),
         2) > -1 && firstTwoTheSame(list) ? sumTheSame(A2($List._op["::"],
         $List.sum($List.take(2)(list)),
         A2($List.drop,
         2,
         list))) : A2($List._op["::"],
         $List.sum($List.take(1)(list)),
         sumTheSame(A2($List.drop,
         1,
         list)));
      }();
   };
   var squashRowLeft = function (list) {
      return function () {
         var numbers = sumTheSame(A2($List.filter,
         function (x) {
            return !_U.eq(x,0);
         },
         list));
         var numberOfZeroes = $List.length(list) - $List.length(numbers);
         return $List.concat(_L.fromArray([numbers
                                          ,A2($List.repeat,
                                          numberOfZeroes,
                                          0)]));
      }();
   };
   var squashRowRight = function ($) {
      return $List.reverse(squashRowLeft($List.reverse($)));
   };
   var squashRight = function ($) {
      return $Matrix.fromList($List.map(squashRowRight)($Matrix.toList($)));
   };
   var squashUp = function ($) {
      return $Matrix.transpose(squashRight($Matrix.transpose($)));
   };
   var squashLeft = function ($) {
      return $Matrix.fromList($List.map(squashRowLeft)($Matrix.toList($)));
   };
   var squashDown = function ($) {
      return $Matrix.transpose(squashLeft($Matrix.transpose($)));
   };
   var moveCells = function (_v9) {
      return function () {
         return function () {
            var _v11 = {ctor: "_Tuple2"
                       ,_0: _v9.x
                       ,_1: _v9.y};
            switch (_v11.ctor)
            {case "_Tuple2":
               switch (_v11._0)
                 {case -1: switch (_v11._1)
                      {case 0: return squashLeft;}
                      break;
                    case 0: switch (_v11._1)
                      {case -1: return squashDown;
                         case 1: return squashUp;}
                      break;
                    case 1: switch (_v11._1)
                      {case 0: return squashRight;}
                      break;}
                 break;}
            return $Basics.identity;
         }();
      }();
   };
   var update = F2(function (input,
   _v14) {
      return function () {
         return function () {
            var $ = $Debug.watch("Randomness")(A2($Random.generate,
            A2($Random.$int,1,16),
            _v14.seed)),
            position = $._0,
            seed$ = $._1;
            var grid$ = moveCells(input)(_v14.grid);
            var grid$$ = function () {
               var _v16 = A2(randomEmptyPosition,
               position,
               grid$);
               switch (_v16.ctor)
               {case "Just":
                  switch (_v16._0.ctor)
                    {case "_Tuple3":
                       return A4($Matrix.set,
                         _v16._0._0,
                         _v16._0._1,
                         2,
                         grid$);}
                    break;
                  case "Nothing": return grid$;}
               _U.badCase($moduleName,
               "between lines 101 and 104");
            }();
            return movement(input) ? {_: {}
                                     ,grid: grid$$
                                     ,seed: seed$} : {_: {}
                                                     ,grid: _v14.grid
                                                     ,seed: _v14.seed};
         }();
      }();
   });
   var GameState = F2(function (a,
   b) {
      return {_: {}
             ,grid: a
             ,seed: b};
   });
   var startTime = 5;
   var startTimeSeed = $Random.initialSeed($Basics.round(startTime));
   var gameState = A3($Signal.foldp,
   update,
   {_: {}
   ,grid: A2($Models$Grid.grid,4,4)
   ,seed: startTimeSeed},
   $Keyboard.arrows);
   var main = A2($Signal.map,
   view,
   gameState);
   _elm.Main.values = {_op: _op
                      ,startTime: startTime
                      ,startTimeSeed: startTimeSeed
                      ,GameState: GameState
                      ,sumTheSame: sumTheSame
                      ,squashRowLeft: squashRowLeft
                      ,squashRowRight: squashRowRight
                      ,squashLeft: squashLeft
                      ,squashRight: squashRight
                      ,squashDown: squashDown
                      ,squashUp: squashUp
                      ,Direction: Direction
                      ,moveCells: moveCells
                      ,movement: movement
                      ,randomEmptyPosition: randomEmptyPosition
                      ,update: update
                      ,gameState: gameState
                      ,view: view
                      ,main: main};
   return _elm.Main.values;
};