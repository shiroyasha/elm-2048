Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Config = Elm.Config.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Matrix = Elm.Matrix.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Views$Grid = Elm.Views.Grid.make(_elm);
   var view = function (model) {
      return A2($Views$Grid.render,
      $Config.defaultConfig,
      A2($Debug.watch,
      "Game State",
      model));
   };
   var squashRight = function (list) {
      return $List.concat(_L.fromArray([A2($List.drop,
                                       3,
                                       list)
                                       ,A2($List.take,3,list)]));
   };
   var squashLeft = function (list) {
      return $List.concat(_L.fromArray([A2($List.drop,
                                       1,
                                       list)
                                       ,A2($List.take,1,list)]));
   };
   var update = F2(function (input,
   state) {
      return function () {
         var _v0 = {ctor: "_Tuple2"
                   ,_0: input.x
                   ,_1: input.y};
         switch (_v0.ctor)
         {case "_Tuple2": switch (_v0._0)
              {case -1: switch (_v0._1)
                   {case 0:
                      return $Matrix.fromList($List.map(squashLeft)($Matrix.toList(state)));}
                   break;
                 case 0: switch (_v0._1)
                   {case -1:
                      return $Matrix.transpose($Matrix.fromList($List.map(squashLeft)($Matrix.toList($Matrix.transpose(state)))));
                      case 1:
                      return $Matrix.transpose($Matrix.fromList($List.map(squashRight)($Matrix.toList($Matrix.transpose(state)))));}
                   break;
                 case 1: switch (_v0._1)
                   {case 0:
                      return $Matrix.fromList($List.map(squashRight)($Matrix.toList(state)));}
                   break;}
              break;}
         return state;
      }();
   });
   var defaultGrid = F2(function (rows,
   cols) {
      return A3($Matrix.set,
      3,
      1,
      2)(A3($Matrix.repeat,
      rows,
      cols,
      0));
   });
   var gameState = A3($Signal.foldp,
   update,
   A2(defaultGrid,4,4),
   $Keyboard.arrows);
   var main = A2($Signal.map,
   view,
   gameState);
   _elm.Main.values = {_op: _op
                      ,defaultGrid: defaultGrid
                      ,squashLeft: squashLeft
                      ,squashRight: squashRight
                      ,update: update
                      ,gameState: gameState
                      ,view: view
                      ,main: main};
   return _elm.Main.values;
};