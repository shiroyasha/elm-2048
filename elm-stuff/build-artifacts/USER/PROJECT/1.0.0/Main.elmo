Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $ElmTest$Assertion = Elm.ElmTest.Assertion.make(_elm),
   $ElmTest$Runner$Element = Elm.ElmTest.Runner.Element.make(_elm),
   $ElmTest$Test = Elm.ElmTest.Test.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Matrix = Elm.Matrix.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Models$Grid = Elm.Models.Grid.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var squashTests = A2($ElmTest$Test.suite,
   "squashTests",
   _L.fromArray([$ElmTest$Test.test("doesn\'t change the length of the list")(A2($ElmTest$Assertion.assertEqual,
                $List.length($Models$Grid.squashRowLeft(_L.fromArray([2
                                                                     ,2
                                                                     ,0]))),
                3))
                ,$ElmTest$Test.test("sums the numbers if they are equal")(A2($ElmTest$Assertion.assertEqual,
                $Models$Grid.squashRowLeft(_L.fromArray([2
                                                        ,2
                                                        ,0])),
                _L.fromArray([4,0,0])))
                ,$ElmTest$Test.test("doesn\'t sums the numbers if they are not equal")(A2($ElmTest$Assertion.assertEqual,
                $Models$Grid.squashRowLeft(_L.fromArray([16
                                                        ,2
                                                        ,0])),
                _L.fromArray([16,2,0])))
                ,$ElmTest$Test.test("sums the numbers even if they are not on the start of the list")(A2($ElmTest$Assertion.assertEqual,
                $Models$Grid.squashRowLeft(_L.fromArray([16
                                                        ,2
                                                        ,2])),
                _L.fromArray([16,4,0])))]));
   var updateTests = function () {
      var downSquash = $Matrix.fromList(_L.fromArray([_L.fromArray([0
                                                                   ,0
                                                                   ,0])
                                                     ,_L.fromArray([0,0,0])
                                                     ,_L.fromArray([0,2,0])]));
      var upSquash = $Matrix.fromList(_L.fromArray([_L.fromArray([0
                                                                 ,2
                                                                 ,0])
                                                   ,_L.fromArray([0,0,0])
                                                   ,_L.fromArray([0,0,0])]));
      var rightSquash = $Matrix.fromList(_L.fromArray([_L.fromArray([0
                                                                    ,0
                                                                    ,0])
                                                      ,_L.fromArray([0,0,2])
                                                      ,_L.fromArray([0,0,0])]));
      var leftSquash = $Matrix.fromList(_L.fromArray([_L.fromArray([0
                                                                   ,0
                                                                   ,0])
                                                     ,_L.fromArray([2,0,0])
                                                     ,_L.fromArray([0,0,0])]));
      var expectedStructure = $Matrix.fromList(_L.fromArray([_L.fromArray([0
                                                                          ,0
                                                                          ,0])
                                                            ,_L.fromArray([0
                                                                          ,2
                                                                          ,0])
                                                            ,_L.fromArray([0
                                                                          ,0
                                                                          ,0])]));
      var testGrid = A2($Models$Grid.grid,
      3,
      3);
      return A2($ElmTest$Test.suite,
      "update",
      _L.fromArray([$ElmTest$Test.test("original grid has the expected structure")(A2($ElmTest$Assertion.assertEqual,
                   testGrid,
                   expectedStructure))
                   ,$ElmTest$Test.test("can squash numbers left")(A2($ElmTest$Assertion.assertEqual,
                   A2($Models$Grid.update,
                   $Models$Grid.SquashLeft,
                   testGrid),
                   leftSquash))
                   ,$ElmTest$Test.test("can squash numbers right")(A2($ElmTest$Assertion.assertEqual,
                   A2($Models$Grid.update,
                   $Models$Grid.SquashRight,
                   testGrid),
                   rightSquash))
                   ,$ElmTest$Test.test("can squash numbers up")(A2($ElmTest$Assertion.assertEqual,
                   A2($Models$Grid.update,
                   $Models$Grid.SquashUp,
                   testGrid),
                   upSquash))
                   ,$ElmTest$Test.test("can squash numbers down")(A2($ElmTest$Assertion.assertEqual,
                   A2($Models$Grid.update,
                   $Models$Grid.SquashDown,
                   testGrid),
                   downSquash))]));
   }();
   var initializationTests = function () {
      var expectedStructure = $Matrix.fromList(_L.fromArray([_L.fromArray([0
                                                                          ,0
                                                                          ,0
                                                                          ,0])
                                                            ,_L.fromArray([0
                                                                          ,2
                                                                          ,0
                                                                          ,0])
                                                            ,_L.fromArray([0
                                                                          ,0
                                                                          ,0
                                                                          ,0])]));
      var testGrid = A2($Models$Grid.grid,
      4,
      3);
      return A2($ElmTest$Test.suite,
      "grid",
      _L.fromArray([$ElmTest$Test.test("has the provided width")(A2($ElmTest$Assertion.assertEqual,
                   $Matrix.width(testGrid),
                   4))
                   ,$ElmTest$Test.test("has the provided height")(A2($ElmTest$Assertion.assertEqual,
                   $Matrix.height(testGrid),
                   3))
                   ,$ElmTest$Test.test("has one element set to 2")(A2($ElmTest$Assertion.assertEqual,
                   A3($Matrix.get,1,1,testGrid),
                   $Maybe.Just(2)))
                   ,$ElmTest$Test.test("has the expected structure")(A2($ElmTest$Assertion.assertEqual,
                   testGrid,
                   expectedStructure))]));
   }();
   var tests = A2($ElmTest$Test.suite,
   "Models.Grid",
   _L.fromArray([initializationTests
                ,updateTests
                ,squashTests]));
   var main = $ElmTest$Runner$Element.runDisplay(tests);
   _elm.Main.values = {_op: _op
                      ,initializationTests: initializationTests
                      ,updateTests: updateTests
                      ,squashTests: squashTests
                      ,tests: tests
                      ,main: main};
   return _elm.Main.values;
};