Elm.Grid = Elm.Grid || {};
Elm.Grid.make = function (_elm) {
   "use strict";
   _elm.Grid = _elm.Grid || {};
   if (_elm.Grid.values)
   return _elm.Grid.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Grid",
   $Basics = Elm.Basics.make(_elm),
   $Cell = Elm.Cell.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $List = Elm.List.make(_elm),
   $Matrix = Elm.Matrix.make(_elm),
   $MatrixLayout = Elm.MatrixLayout.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Shapes = Elm.Shapes.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Units = Elm.Units.make(_elm);
   var view = function (model) {
      return function () {
         var cells = $Graphics$Collage.group($Matrix.flatten(A2($Matrix.map,
         $Cell.view,
         model.cells)));
         var bg = A3($Shapes.roundedRect,
         $MatrixLayout.gridSize(model.layout),
         3,
         A3($Color.rgb,187,173,160));
         return $Graphics$Collage.group(_L.fromArray([bg
                                                     ,cells]));
      }();
   };
   var isGridStationary = function (model) {
      return $List.all(function (cell) {
         return _U.eq(cell.state,
         $Cell.Stationary);
      })($Matrix.flatten(model.cells));
   };
   var move = F2(function (dir,
   model) {
      return function () {
         switch (dir.ctor)
         {case "Left":
            return function () {
                 var cells = A2($Matrix.indexedMap,
                 F3(function (x,y,cell) {
                    return _U.eq(cell.number,
                    0) ? cell : A2($Cell.update,
                    A2($Cell.Move,
                    {ctor: "_Tuple2",_0: 0,_1: y},
                    A2($MatrixLayout.cellPosition,
                    model.layout,
                    {ctor: "_Tuple2",_0: 0,_1: y})),
                    cell);
                 }),
                 model.cells);
                 return _U.replace([["cells"
                                    ,cells]],
                 model);
              }();
            case "Up": return model;}
         _U.badCase($moduleName,
         "between lines 45 and 53");
      }();
   });
   var addCell = F3(function (_v1,
   number,
   model) {
      return function () {
         switch (_v1.ctor)
         {case "_Tuple2":
            return function () {
                 var position = A2($MatrixLayout.cellPosition,
                 model.layout,
                 _v1);
                 var cell = A3($Cell.init,
                 position,
                 model.layout.cellSize,
                 number);
                 return _U.replace([["cells"
                                    ,A4($Matrix.set,
                                    _v1._0,
                                    _v1._1,
                                    cell,
                                    model.cells)]],
                 model);
              }();}
         _U.badCase($moduleName,
         "between lines 37 and 41");
      }();
   });
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "Move":
            return isGridStationary(model) ? A2(move,
              action._0,
              model) : model;
            case "NewCell":
            switch (action._0.ctor)
              {case "_Tuple2":
                 return A3(addCell,
                   action._0._0,
                   action._0._1,
                   model);}
              break;
            case "Tick":
            return function () {
                 var cells$ = A2($Matrix.map,
                 $Cell.update($Cell.Tick(action._0)),
                 model.cells);
                 var cells$$ = A2($Matrix.map,
                 function (cell) {
                    return function () {
                       var _v11 = cell.state;
                       switch (_v11.ctor)
                       {case "Merging":
                          return A2($Cell.update,
                            $Cell.Empty,
                            cell);}
                       return cell;
                    }();
                 },
                 cells$);
                 return _U.replace([["cells"
                                    ,cells$$]],
                 model);
              }();}
         _U.badCase($moduleName,
         "between lines 61 and 78");
      }();
   });
   var Move = function (a) {
      return {ctor: "Move",_0: a};
   };
   var NewCell = function (a) {
      return {ctor: "NewCell"
             ,_0: a};
   };
   var Tick = function (a) {
      return {ctor: "Tick",_0: a};
   };
   var init = F2(function (size,
   _v13) {
      return function () {
         switch (_v13.ctor)
         {case "_Tuple2":
            return function () {
                 var layout = A2($MatrixLayout.init,
                 size,
                 _v13);
                 var cell = F2(function (x,y) {
                    return A3($Cell.init,
                    A2($MatrixLayout.cellPosition,
                    layout,
                    {ctor: "_Tuple2",_0: x,_1: y}),
                    layout.cellSize,
                    0);
                 });
                 return {_: {}
                        ,cells: A3($Matrix.matrix,
                        _v13._0,
                        _v13._1,
                        cell)
                        ,layout: layout};
              }();}
         _U.badCase($moduleName,
         "between lines 20 and 27");
      }();
   });
   var Model = F2(function (a,b) {
      return {_: {}
             ,cells: a
             ,layout: b};
   });
   _elm.Grid.values = {_op: _op
                      ,Model: Model
                      ,init: init
                      ,Tick: Tick
                      ,NewCell: NewCell
                      ,Move: Move
                      ,addCell: addCell
                      ,move: move
                      ,isGridStationary: isGridStationary
                      ,update: update
                      ,view: view};
   return _elm.Grid.values;
};