Elm.Grid = Elm.Grid || {};
Elm.Grid.make = function (_elm) {
   "use strict";
   _elm.Grid = _elm.Grid || {};
   if (_elm.Grid.values)
   return _elm.Grid.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Grid",
   $Basics = Elm.Basics.make(_elm),
   $Cell = Elm.Cell.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $List = Elm.List.make(_elm),
   $Matrix = Elm.Matrix.make(_elm),
   $MatrixLayout = Elm.MatrixLayout.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Shapes = Elm.Shapes.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Units = Elm.Units.make(_elm);
   var viewBg = function (model) {
      return $Shapes.gridBackground($MatrixLayout.gridSize(model.layout));
   };
   var viewCellBases = function (model) {
      return function () {
         var base = function (position) {
            return $Graphics$Collage.move(position)($Shapes.cellBase(model.layout.cellSize));
         };
         var positions = $MatrixLayout.cellPositions(model.layout);
         return $Graphics$Collage.group(A2($List.map,
         base,
         positions));
      }();
   };
   var scheduleCell = function (model) {
      return _U.replace([["cellsToAdd"
                         ,model.cellsToAdd + 1]],
      model);
   };
   var isNotStationaty = function (cell) {
      return !_U.eq(cell.state,
      $Cell.Stationary);
   };
   var isStationaty = function (cell) {
      return _U.eq(cell.state,
      $Cell.Stationary);
   };
   var isGridStationary = function (model) {
      return $List.all(isStationaty)($Matrix.flatten(model.cells));
   };
   var mergeOne = F2(function (cell,
   model) {
      return function () {
         var _v0 = cell.state;
         switch (_v0.ctor)
         {case "WaitingForMerge":
            return function () {
                 var yOld = $Basics.snd(cell.matrixPosition);
                 var xOld = $Basics.fst(cell.matrixPosition);
                 var yNew = $Basics.snd(_v0._0);
                 var xNew = $Basics.fst(_v0._0);
                 var cells$ = A3($Matrix.update,
                 xOld,
                 yOld,
                 $Cell.update($Cell.Substract(cell.number)))(A3($Matrix.update,
                 xNew,
                 yNew,
                 $Cell.update($Cell.Add(cell.number)))(model.cells));
                 return _U.replace([["cells"
                                    ,cells$]],
                 model);
              }();}
         return model;
      }();
   });
   var mergeAll = F2(function (model,
   cells) {
      return function () {
         switch (cells.ctor)
         {case "::": return A2(mergeOne,
              cells._0,
              A2(mergeAll,model,cells._1));
            case "[]": return model;}
         _U.badCase($moduleName,
         "between lines 169 and 171");
      }();
   });
   var merge = function (model) {
      return A2(mergeAll,
      model,
      $Matrix.flatten(model.cells));
   };
   var moveCellsToCell = F2(function (cells,
   cell) {
      return function () {
         var movement = A2($Cell.Move,
         cell.matrixPosition,
         cell.position);
         return A2($List.map,
         $Cell.update(movement),
         cells);
      }();
   });
   var groupPairs = function (list) {
      return function () {
         switch (list.ctor)
         {case "::":
            switch (list._1.ctor)
              {case "::":
                 return _U.eq($List.sum($List.map(function (_) {
                      return _.number;
                   })(list._0)),
                   $List.sum($List.map(function (_) {
                      return _.number;
                   })(list._1._0))) ? A2($List._op["::"],
                   $List.concat(_L.fromArray([list._0
                                             ,list._1._0])),
                   groupPairs(list._1._1)) : A2($List._op["::"],
                   list._0,
                   groupPairs(A2($List._op["::"],
                   list._1._0,
                   list._1._1)));
                 case "[]":
                 return _L.fromArray([list._0]);}
              break;
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 111 and 116");
      }();
   };
   var dropWithZeroes = function (list) {
      return function () {
         switch (list.ctor)
         {case "::":
            return _U.eq(list._0.number,
              0) ? dropWithZeroes(list._1) : list._1;
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 95 and 99");
      }();
   };
   var takeWithZeroes = function (list) {
      return function () {
         switch (list.ctor)
         {case "::":
            return _U.eq(list._0.number,
              0) ? A2($List._op["::"],
              list._0,
              takeWithZeroes(list._1)) : _L.fromArray([list._0]);
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 87 and 91");
      }();
   };
   var groupWithZeroes = function (list) {
      return function () {
         switch (list.ctor)
         {case "[]":
            return _L.fromArray([]);}
         return A2($List._op["::"],
         takeWithZeroes(list),
         groupWithZeroes(dropWithZeroes(list)));
      }();
   };
   var moveList = function (cells) {
      return $List.concat(A3($List.map2,
      moveCellsToCell,
      groupPairs(groupWithZeroes(cells)),
      cells));
   };
   var move = F2(function (dir,
   model) {
      return function () {
         switch (dir.ctor)
         {case "Down":
            return _U.replace([["cells"
                               ,$Matrix.transpose($Matrix.fromList($List.map($List.reverse)($List.map(moveList)($List.map($List.reverse)($Matrix.toList($Matrix.transpose(model.cells)))))))]],
              model);
            case "Left":
            return _U.replace([["cells"
                               ,$Matrix.fromList($List.map(moveList)($Matrix.toList(model.cells)))]],
              model);
            case "Right":
            return _U.replace([["cells"
                               ,$Matrix.fromList($List.map($List.reverse)($List.map(moveList)($List.map($List.reverse)($Matrix.toList(model.cells)))))]],
              model);
            case "Up":
            return _U.replace([["cells"
                               ,$Matrix.transpose($Matrix.fromList($List.map(moveList)($Matrix.toList($Matrix.transpose(model.cells)))))]],
              model);}
         return model;
      }();
   });
   var nth = F2(function (index,
   list) {
      return function () {
         switch (index)
         {case 0:
            return $List.head(list);}
         return A2(nth,
         index - 1,
         $Maybe.withDefault(_L.fromArray([]))($List.tail(list)));
      }();
   });
   var numberedCells = function (model) {
      return $List.filter(function (cell) {
         return !_U.eq(cell.number,0);
      })($Matrix.flatten(model.cells));
   };
   var viewCells = function (model) {
      return $Graphics$Collage.group($List.map($Cell.view)(numberedCells(model)));
   };
   var view = function (model) {
      return $Graphics$Collage.group(_L.fromArray([viewBg(model)
                                                  ,viewCellBases(model)
                                                  ,viewCells(model)]));
   };
   var emptyCells = function (model) {
      return $List.filter(function (cell) {
         return _U.eq(cell.number,0);
      })($Matrix.flatten(model.cells));
   };
   var addCell = F3(function (_v19,
   number,
   model) {
      return function () {
         switch (_v19.ctor)
         {case "_Tuple2":
            return function () {
                 var position = A2($MatrixLayout.cellPosition,
                 model.layout,
                 _v19);
                 var cell = A4($Cell.init,
                 position,
                 _v19,
                 model.layout.cellSize,
                 number);
                 return _U.replace([["cells"
                                    ,A4($Matrix.set,
                                    _v19._0,
                                    _v19._1,
                                    cell,
                                    model.cells)]],
                 model);
              }();}
         _U.badCase($moduleName,
         "between lines 48 and 52");
      }();
   });
   var addCellToRandomPosition = F2(function (number,
   model) {
      return function () {
         var $ = A2($Random.generate,
         A2($Random.$int,0,100),
         model.seed),
         randomNumber = $._0,
         seed$ = $._1;
         var cells = emptyCells(model);
         var randomCell = A2(nth,
         A2($Basics._op["%"],
         randomNumber,
         $List.length(cells)),
         cells);
         var model$ = function () {
            switch (randomCell.ctor)
            {case "Just": return A3(addCell,
                 randomCell._0.matrixPosition,
                 number,
                 model);
               case "Nothing": return model$;}
            _U.badCase($moduleName,
            "between lines 75 and 79");
         }();
         return _U.replace([["cellsToAdd"
                            ,model$.cellsToAdd - 1]
                           ,["seed",seed$]],
         model$);
      }();
   });
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "Move":
            return isGridStationary(model) ? (!_U.eq(action._0,
              $Units.Nowhere) ? scheduleCell : $Basics.identity)(move(action._0)(model)) : model;
            case "NewCell":
            switch (action._0.ctor)
              {case "_Tuple2":
                 return A3(addCell,
                   action._0._0,
                   action._0._1,
                   model);}
              break;
            case "Tick":
            return function () {
                 var model$ = _U.replace([["cells"
                                          ,A2($Matrix.map,
                                          $Cell.update($Cell.Tick(action._0)),
                                          model.cells)]],
                 model);
                 var model$$ = merge(model$);
                 var model$$$ = isGridStationary(model) && _U.cmp(model.cellsToAdd,
                 0) > 0 ? A2(addCellToRandomPosition,
                 2,
                 model$$) : model$$;
                 return model$$$;
              }();}
         _U.badCase($moduleName,
         "between lines 195 and 213");
      }();
   });
   var Move = function (a) {
      return {ctor: "Move",_0: a};
   };
   var NewCell = function (a) {
      return {ctor: "NewCell"
             ,_0: a};
   };
   var Tick = function (a) {
      return {ctor: "Tick",_0: a};
   };
   var init = F3(function (size,
   _v31,
   seed) {
      return function () {
         switch (_v31.ctor)
         {case "_Tuple2":
            return function () {
                 var layout = A2($MatrixLayout.init,
                 size,
                 _v31);
                 var cell = F2(function (x,y) {
                    return function () {
                       var matrixPosition = {ctor: "_Tuple2"
                                            ,_0: x
                                            ,_1: y};
                       var position = A2($MatrixLayout.cellPosition,
                       layout,
                       matrixPosition);
                       return A4($Cell.init,
                       position,
                       matrixPosition,
                       layout.cellSize,
                       0);
                    }();
                 });
                 return {_: {}
                        ,cells: A3($Matrix.matrix,
                        _v31._0,
                        _v31._1,
                        cell)
                        ,cellsToAdd: 0
                        ,layout: layout
                        ,seed: seed};
              }();}
         _U.badCase($moduleName,
         "between lines 23 and 38");
      }();
   });
   var Model = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,cells: a
             ,cellsToAdd: c
             ,layout: b
             ,seed: d};
   });
   _elm.Grid.values = {_op: _op
                      ,Model: Model
                      ,init: init
                      ,Tick: Tick
                      ,NewCell: NewCell
                      ,Move: Move
                      ,addCell: addCell
                      ,emptyCells: emptyCells
                      ,numberedCells: numberedCells
                      ,nth: nth
                      ,addCellToRandomPosition: addCellToRandomPosition
                      ,takeWithZeroes: takeWithZeroes
                      ,dropWithZeroes: dropWithZeroes
                      ,groupWithZeroes: groupWithZeroes
                      ,groupPairs: groupPairs
                      ,moveCellsToCell: moveCellsToCell
                      ,moveList: moveList
                      ,move: move
                      ,mergeOne: mergeOne
                      ,mergeAll: mergeAll
                      ,merge: merge
                      ,isGridStationary: isGridStationary
                      ,isStationaty: isStationaty
                      ,isNotStationaty: isNotStationaty
                      ,scheduleCell: scheduleCell
                      ,update: update
                      ,viewCellBases: viewCellBases
                      ,viewBg: viewBg
                      ,viewCells: viewCells
                      ,view: view};
   return _elm.Grid.values;
};