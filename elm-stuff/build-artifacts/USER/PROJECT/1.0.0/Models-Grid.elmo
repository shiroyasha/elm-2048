Elm.Models = Elm.Models || {};
Elm.Models.Grid = Elm.Models.Grid || {};
Elm.Models.Grid.make = function (_elm) {
   "use strict";
   _elm.Models = _elm.Models || {};
   _elm.Models.Grid = _elm.Models.Grid || {};
   if (_elm.Models.Grid.values)
   return _elm.Models.Grid.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Models.Grid",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Matrix = Elm.Matrix.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var sumTheSame = function (list) {
      return function () {
         var firstTwoTheSame = function (list) {
            return _U.eq(A2($List.take,
            1,
            list),
            $List.drop(1)($List.take(2)(list)));
         };
         return _U.eq($List.length(list),
         0) ? list : _U.eq($List.length(list),
         1) ? list : _U.cmp($List.length(list),
         2) > -1 && firstTwoTheSame(list) ? sumTheSame(A2($List._op["::"],
         $List.sum($List.take(2)(list)),
         A2($List.drop,
         2,
         list))) : A2($List._op["::"],
         $List.sum($List.take(1)(list)),
         sumTheSame(A2($List.drop,
         1,
         list)));
      }();
   };
   var squashRowLeft = function (list) {
      return function () {
         var numbers = sumTheSame(A2($List.filter,
         function (x) {
            return !_U.eq(x,0);
         },
         list));
         var numberOfZeroes = $List.length(list) - $List.length(numbers);
         return $List.concat(_L.fromArray([numbers
                                          ,A2($List.repeat,
                                          numberOfZeroes,
                                          0)]));
      }();
   };
   var squashRowRight = function ($) {
      return $List.reverse(squashRowLeft($List.reverse($)));
   };
   var emptyPositions = function ($) {
      return $List.map(function (_v5) {
         return function () {
            switch (_v5.ctor)
            {case "_Tuple3":
               return {ctor: "_Tuple2"
                      ,_0: _v5._0
                      ,_1: _v5._1};}
            _U.badCase($moduleName,
            "on line 35, column 31 to 35");
         }();
      })($List.filter(function (_v0) {
         return function () {
            switch (_v0.ctor)
            {case "_Tuple3":
               return _U.eq(_v0._2,0);}
            _U.badCase($moduleName,
            "on line 34, column 38 to 49");
         }();
      })($Matrix.toIndexedList($)));
   };
   var addCell = F2(function (_v10,
   grid) {
      return function () {
         switch (_v10.ctor)
         {case "_Tuple2":
            return A4($Matrix.set,
              _v10._0,
              _v10._1,
              2,
              grid);}
         _U.badCase($moduleName,
         "on line 19, column 23 to 44");
      }();
   });
   var emptyGrid = F2(function (width,
   height) {
      return A3($Matrix.repeat,
      width,
      height,
      0);
   });
   var grid = F2(function (width,
   height) {
      return addCell({ctor: "_Tuple2"
                     ,_0: 1
                     ,_1: 1})(A2(emptyGrid,
      width,
      height));
   });
   var NoAction = {ctor: "NoAction"};
   var SquashRight = {ctor: "SquashRight"};
   var SquashLeft = {ctor: "SquashLeft"};
   var update = function (action) {
      return function () {
         switch (action.ctor)
         {case "NoAction":
            return $Basics.identity;
            case "SquashDown":
            return function ($) {
                 return $Matrix.transpose(update(SquashRight)($Matrix.transpose($)));
              };
            case "SquashLeft":
            return function ($) {
                 return $Matrix.fromList($List.map(squashRowLeft)($Matrix.toList($)));
              };
            case "SquashRight":
            return function ($) {
                 return $Matrix.fromList($List.map(squashRowRight)($Matrix.toList($)));
              };
            case "SquashUp":
            return function ($) {
                 return $Matrix.transpose(update(SquashLeft)($Matrix.transpose($)));
              };}
         _U.badCase($moduleName,
         "between lines 23 and 28");
      }();
   };
   var SquashDown = {ctor: "SquashDown"};
   var SquashUp = {ctor: "SquashUp"};
   _elm.Models.Grid.values = {_op: _op
                             ,SquashUp: SquashUp
                             ,SquashDown: SquashDown
                             ,SquashLeft: SquashLeft
                             ,SquashRight: SquashRight
                             ,NoAction: NoAction
                             ,emptyGrid: emptyGrid
                             ,grid: grid
                             ,addCell: addCell
                             ,update: update
                             ,emptyPositions: emptyPositions
                             ,sumTheSame: sumTheSame
                             ,squashRowLeft: squashRowLeft
                             ,squashRowRight: squashRowRight};
   return _elm.Models.Grid.values;
};