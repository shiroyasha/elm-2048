Elm.Models = Elm.Models || {};
Elm.Models.Grid = Elm.Models.Grid || {};
Elm.Models.Grid.make = function (_elm) {
   "use strict";
   _elm.Models = _elm.Models || {};
   _elm.Models.Grid = _elm.Models.Grid || {};
   if (_elm.Models.Grid.values)
   return _elm.Models.Grid.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Models.Grid",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Matrix = Elm.Matrix.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Models$GridRow = Elm.Models.GridRow.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var squash = function (grid) {
      return function () {
         var $ = $List.unzip($List.map($Models$GridRow.squash)($Matrix.toList(grid))),
         points = $._0,
         rows$ = $._1;
         return {ctor: "_Tuple2"
                ,_0: $List.sum(points)
                ,_1: $Matrix.fromList(rows$)};
      }();
   };
   var nth = F2(function (index,
   list) {
      return function () {
         switch (index)
         {case 0:
            return $List.head(list);}
         return A2(nth,
         index - 1,
         $Maybe.withDefault(_L.fromArray([]))($List.tail(list)));
      }();
   });
   var numbers = function ($) {
      return $List.concat($Matrix.toList($));
   };
   var flip = function ($) {
      return $Matrix.fromList($List.map($List.reverse)($Matrix.toList($)));
   };
   var transpose = $Matrix.transpose;
   var update = F2(function (action,
   grid) {
      return function () {
         var $ = squash(function () {
            switch (action.ctor)
            {case "SquashDown":
               return function ($) {
                    return flip(transpose($));
                 };
               case "SquashLeft":
               return $Basics.identity;
               case "SquashRight": return flip;
               case "SquashUp":
               return transpose;}
            _U.badCase($moduleName,
            "between lines 44 and 48");
         }()(grid)),
         points = $._0,
         grid$ = $._1;
         var grid$$ = function () {
            switch (action.ctor)
            {case "SquashDown":
               return function ($) {
                    return transpose(flip($));
                 };
               case "SquashLeft":
               return $Basics.identity;
               case "SquashRight": return flip;
               case "SquashUp":
               return transpose;}
            _U.badCase($moduleName,
            "between lines 50 and 55");
         }()(grid$);
         return {ctor: "_Tuple2"
                ,_0: points
                ,_1: grid$$};
      }();
   });
   var emptyPositions = function ($) {
      return $List.map(function (_v8) {
         return function () {
            switch (_v8.ctor)
            {case "_Tuple3":
               return {ctor: "_Tuple2"
                      ,_0: _v8._0
                      ,_1: _v8._1};}
            _U.badCase($moduleName,
            "on line 26, column 31 to 35");
         }();
      })($List.filter(function (_v3) {
         return function () {
            switch (_v3.ctor)
            {case "_Tuple3":
               return _U.eq(_v3._2,0);}
            _U.badCase($moduleName,
            "on line 25, column 38 to 49");
         }();
      })($Matrix.toIndexedList($)));
   };
   var addCell = F2(function (_v13,
   grid) {
      return function () {
         switch (_v13.ctor)
         {case "_Tuple2":
            return A4($Matrix.set,
              _v13._0,
              _v13._1,
              2,
              grid);}
         _U.badCase($moduleName,
         "on line 19, column 23 to 44");
      }();
   });
   var addRandomCell = F2(function (seed,
   grid) {
      return function () {
         var positions = emptyPositions(grid);
         var $ = A2($Random.generate,
         A2($Random.$int,0,100),
         seed),
         randomNumber = $._0,
         seed$ = $._1;
         var randomPosition = A2(nth,
         A2($Basics._op["%"],
         randomNumber,
         $List.length(positions)),
         positions);
         var grid$ = function () {
            switch (randomPosition.ctor)
            {case "Just": return A2(addCell,
                 randomPosition._0,
                 grid);}
            _U.badCase($moduleName,
            "between lines 76 and 78");
         }();
         return {ctor: "_Tuple2"
                ,_0: seed$
                ,_1: grid$};
      }();
   });
   var emptyGrid = F2(function (width,
   height) {
      return A3($Matrix.repeat,
      width,
      height,
      0);
   });
   var NoAction = {ctor: "NoAction"};
   var SquashRight = {ctor: "SquashRight"};
   var SquashLeft = {ctor: "SquashLeft"};
   var SquashDown = {ctor: "SquashDown"};
   var SquashUp = {ctor: "SquashUp"};
   _elm.Models.Grid.values = {_op: _op
                             ,SquashUp: SquashUp
                             ,SquashDown: SquashDown
                             ,SquashLeft: SquashLeft
                             ,SquashRight: SquashRight
                             ,NoAction: NoAction
                             ,emptyGrid: emptyGrid
                             ,addCell: addCell
                             ,emptyPositions: emptyPositions
                             ,transpose: transpose
                             ,flip: flip
                             ,numbers: numbers
                             ,update: update
                             ,nth: nth
                             ,addRandomCell: addRandomCell
                             ,squash: squash};
   return _elm.Models.Grid.values;
};