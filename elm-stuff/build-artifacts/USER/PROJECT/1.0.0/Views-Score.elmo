Elm.Views = Elm.Views || {};
Elm.Views.Score = Elm.Views.Score || {};
Elm.Views.Score.make = function (_elm) {
   "use strict";
   _elm.Views = _elm.Views || {};
   _elm.Views.Score = _elm.Views.Score || {};
   if (_elm.Views.Score.values)
   return _elm.Views.Score.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Views.Score",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Shapes = Elm.Shapes.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Text = Elm.Text.make(_elm);
   var label = function (score) {
      return $Graphics$Collage.move({ctor: "_Tuple2"
                                    ,_0: 0
                                    ,_1: -5})($Graphics$Collage.text($Text.bold($Text.height(20)($Text.color($Color.white)($Text.fromString($Basics.toString(score)))))));
   };
   var title = $Graphics$Collage.move({ctor: "_Tuple2"
                                      ,_0: 0
                                      ,_1: 15})($Graphics$Collage.text($Text.bold($Text.height(14)($Text.color(A3($Color.rgb,
   238,
   228,
   218))($Text.fromString("SCORE"))))));
   var backgroung = F2(function (w,
   h) {
      return A4($Shapes.roundedRect,
      w - 15,
      h - 40,
      3,
      A3($Color.rgb,187,173,160));
   });
   var render = function (score) {
      return function () {
         var height = 100;
         var width = 120;
         return A3($Graphics$Collage.collage,
         width,
         height,
         _L.fromArray([A2(backgroung,
                      width,
                      height)
                      ,title
                      ,label(score)]));
      }();
   };
   _elm.Views.Score.values = {_op: _op
                             ,backgroung: backgroung
                             ,title: title
                             ,label: label
                             ,render: render};
   return _elm.Views.Score.values;
};