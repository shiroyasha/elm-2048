Elm.Views = Elm.Views || {};
Elm.Views.Cell = Elm.Views.Cell || {};
Elm.Views.Cell.make = function (_elm) {
   "use strict";
   _elm.Views = _elm.Views || {};
   _elm.Views.Cell = _elm.Views.Cell || {};
   if (_elm.Views.Cell.values)
   return _elm.Views.Cell.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Views.Cell",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Shapes = Elm.Shapes.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Text = Elm.Text.make(_elm);
   var labelSize = F2(function (cellSize,
   number) {
      return _U.cmp(number,
      100) < 0 ? $Basics.toFloat(cellSize) / 2 : _U.cmp(number,
      100) > 0 && _U.cmp(number,
      1000) < 0 ? $Basics.toFloat(cellSize) / 2.5 : _U.cmp(number,
      1000) > 0 ? $Basics.toFloat(cellSize) / 3 : _U.badIf($moduleName,
      "between lines 48 and 50");
   });
   var textColor = function (number) {
      return function () {
         switch (number)
         {case 2: return A3($Color.rgb,
              120,
              110,
              101);
            case 4: return A3($Color.rgb,
              120,
              110,
              101);}
         return $Color.white;
      }();
   };
   var label = F2(function (size,
   number) {
      return $Graphics$Collage.move({ctor: "_Tuple2"
                                    ,_0: 0
                                    ,_1: 7})($Graphics$Collage.text($Text.bold($Text.height(size)($Text.color(textColor(number))($Text.fromString(_U.cmp(number,
      0) > 0 ? $Basics.toString(number) : ""))))));
   });
   var backgroungColor = function (number) {
      return function () {
         switch (number)
         {case 0: return A3($Color.rgb,
              204,
              192,
              179);
            case 2: return A3($Color.rgb,
              238,
              228,
              218);
            case 4: return A3($Color.rgb,
              236,
              224,
              200);
            case 8: return A3($Color.rgb,
              241,
              176,
              120);
            case 16: return A3($Color.rgb,
              235,
              140,
              82);
            case 32: return A3($Color.rgb,
              243,
              123,
              96);
            case 64: return A3($Color.rgb,
              233,
              89,
              55);
            case 128: return A3($Color.rgb,
              242,
              216,
              106);
            case 256: return A3($Color.rgb,
              231,
              191,
              41);
            case 512: return A3($Color.rgb,
              231,
              191,
              41);
            case 1024: return A3($Color.rgb,
              228,
              183,
              19);
            case 2048: return A3($Color.rgb,
              238,
              195,
              3);}
         return $Color.gray;
      }();
   };
   var backgroung = F3(function (size,
   radius,
   number) {
      return A3($Shapes.roundedSquare,
      size,
      radius,
      backgroungColor(number));
   });
   var cell = F3(function (size,
   radius,
   number) {
      return $Graphics$Collage.group(_L.fromArray([A3(backgroung,
                                                  size,
                                                  radius,
                                                  number)
                                                  ,A2(label,
                                                  A2(labelSize,size,number),
                                                  number)]));
   });
   _elm.Views.Cell.values = {_op: _op
                            ,backgroungColor: backgroungColor
                            ,textColor: textColor
                            ,label: label
                            ,labelSize: labelSize
                            ,backgroung: backgroung
                            ,cell: cell};
   return _elm.Views.Cell.values;
};