Elm.Cell = Elm.Cell || {};
Elm.Cell.make = function (_elm) {
   "use strict";
   _elm.Cell = _elm.Cell || {};
   if (_elm.Cell.values)
   return _elm.Cell.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Cell",
   $Basics = Elm.Basics.make(_elm),
   $CellAnimations = Elm.CellAnimations.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $List = Elm.List.make(_elm),
   $MatrixLayout = Elm.MatrixLayout.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Shapes = Elm.Shapes.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Units = Elm.Units.make(_elm);
   var view = F2(function (layout,
   model) {
      return function () {
         var size = layout.cellSize;
         var position = A2($MatrixLayout.cellPosition,
         layout,
         model.matrixPosition);
         var cell = $Graphics$Collage.move(position)(A2($Shapes.cell,
         size,
         model.number));
         return function () {
            var _v0 = model.state;
            switch (_v0.ctor)
            {case "Appearing":
               return A2($Graphics$Collage.scale,
                 $CellAnimations.appearValue(_v0._0),
                 cell);
               case "Moving":
               return function () {
                    var toPosition = A2($MatrixLayout.cellPosition,
                    layout,
                    _v0._0);
                    var progress = $CellAnimations.moveValue(_v0._1);
                    var diffX = ($Basics.fst(toPosition) - $Basics.fst(position)) * progress;
                    var diffY = ($Basics.snd(toPosition) - $Basics.snd(position)) * progress;
                    return $Graphics$Collage.move({ctor: "_Tuple2"
                                                  ,_0: diffX
                                                  ,_1: diffY})(cell);
                 }();
               case "Stationary": return cell;
               case "WaitingForMerge":
               return cell;}
            _U.badCase($moduleName,
            "between lines 97 and 116");
         }();
      }();
   });
   var Substract = function (a) {
      return {ctor: "Substract"
             ,_0: a};
   };
   var Add = function (a) {
      return {ctor: "Add",_0: a};
   };
   var Empty = {ctor: "Empty"};
   var Tick = function (a) {
      return {ctor: "Tick",_0: a};
   };
   var Move = function (a) {
      return {ctor: "Move",_0: a};
   };
   var Model = F3(function (a,
   b,
   c) {
      return {_: {}
             ,matrixPosition: b
             ,number: a
             ,state: c};
   });
   var WaitingForMerge = function (a) {
      return {ctor: "WaitingForMerge"
             ,_0: a};
   };
   var Stationary = {ctor: "Stationary"};
   var Appearing = function (a) {
      return {ctor: "Appearing"
             ,_0: a};
   };
   var init = F2(function (number,
   matrixPosition) {
      return {_: {}
             ,matrixPosition: matrixPosition
             ,number: number
             ,state: _U.eq(number,
             0) ? Stationary : Appearing(0.0)};
   });
   var appeatTick = F3(function (time,
   dt,
   model) {
      return function () {
         var time$ = time + dt;
         return $CellAnimations.appearFinished(time$) ? _U.replace([["state"
                                                                    ,Stationary]],
         model) : _U.replace([["state"
                              ,Appearing(time$)]],
         model);
      }();
   });
   var Moving = F2(function (a,b) {
      return {ctor: "Moving"
             ,_0: a
             ,_1: b};
   });
   var moveTick = F4(function (matrixPosition,
   time,
   dt,
   model) {
      return function () {
         var time$ = time + dt;
         return $CellAnimations.moveFinished(time$) ? _U.replace([["state"
                                                                  ,WaitingForMerge(matrixPosition)]],
         model) : _U.replace([["state"
                              ,A2(Moving,
                              matrixPosition,
                              time$)]],
         model);
      }();
   });
   var tick = F2(function (dt,
   model) {
      return function () {
         var _v5 = model.state;
         switch (_v5.ctor)
         {case "Appearing":
            return A3(appeatTick,
              _v5._0,
              dt,
              model);
            case "Moving":
            return A4(moveTick,
              _v5._0,
              _v5._1,
              dt,
              model);}
         return model;
      }();
   });
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "Add":
            return _U.eq(model.number,
              0) ? _U.replace([["state"
                               ,Stationary]
                              ,["number",action._0]],
              model) : _U.replace([["state"
                                   ,Appearing(200)]
                                  ,["number"
                                   ,model.number + action._0]],
              model);
            case "Move":
            return _U.eq(model.number,
              0) || _U.eq(action._0,
              model.matrixPosition) ? model : _U.replace([["state"
                                                          ,A2(Moving,
                                                          action._0,
                                                          0.0)]],
              model);
            case "Substract":
            return function () {
                 var _v14 = model.state;
                 switch (_v14.ctor)
                 {case "Appearing":
                    return _U.replace([["number"
                                       ,model.number - action._0]],
                      model);}
                 return _U.replace([["state"
                                    ,Stationary]
                                   ,["number"
                                    ,model.number - action._0]],
                 model);
              }();
            case "Tick": return A2(tick,
              action._0,
              model);}
         _U.badCase($moduleName,
         "between lines 66 and 83");
      }();
   });
   _elm.Cell.values = {_op: _op
                      ,Moving: Moving
                      ,Appearing: Appearing
                      ,Stationary: Stationary
                      ,WaitingForMerge: WaitingForMerge
                      ,Model: Model
                      ,init: init
                      ,moveTick: moveTick
                      ,appeatTick: appeatTick
                      ,tick: tick
                      ,Move: Move
                      ,Tick: Tick
                      ,Empty: Empty
                      ,Add: Add
                      ,Substract: Substract
                      ,update: update
                      ,view: view};
   return _elm.Cell.values;
};