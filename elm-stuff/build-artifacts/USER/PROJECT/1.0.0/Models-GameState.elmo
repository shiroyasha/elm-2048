Elm.Models = Elm.Models || {};
Elm.Models.GameState = Elm.Models.GameState || {};
Elm.Models.GameState.make = function (_elm) {
   "use strict";
   _elm.Models = _elm.Models || {};
   _elm.Models.GameState = _elm.Models.GameState || {};
   if (_elm.Models.GameState.values)
   return _elm.Models.GameState.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Models.GameState",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Models$Grid = Elm.Models.Grid.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var initial = function (seed) {
      return {_: {}
             ,grid: A2($Models$Grid.grid,4,4)
             ,score: 0
             ,seed: seed};
   };
   var nth = F2(function (index,
   list) {
      return function () {
         switch (index)
         {case 0:
            return $List.head(list);}
         return A2(nth,
         index - 1,
         $Maybe.withDefault(_L.fromArray([]))($List.tail(list)));
      }();
   });
   var addRandomCell = F2(function (seed,
   grid) {
      return function () {
         var emptyPositions = $Models$Grid.emptyPositions(grid);
         var $ = A2($Random.generate,
         A2($Random.$int,0,100),
         seed),
         randomNumber = $._0,
         seed$ = $._1;
         var randomPosition = A2(nth,
         A2($Basics._op["%"],
         randomNumber,
         $List.length(emptyPositions)),
         emptyPositions);
         var grid$ = function () {
            switch (randomPosition.ctor)
            {case "Just":
               return A2($Models$Grid.addCell,
                 randomPosition._0,
                 grid);}
            _U.badCase($moduleName,
            "between lines 33 and 35");
         }();
         return {ctor: "_Tuple2"
                ,_0: seed$
                ,_1: grid$};
      }();
   });
   var update = F2(function (gridAction,
   _v3) {
      return function () {
         return function () {
            var $ = !_U.eq(gridAction,
            $Models$Grid.NoAction) ? A2($Models$Grid.update,
            gridAction,
            _v3.grid) : {ctor: "_Tuple2"
                        ,_0: 0
                        ,_1: _v3.grid},
            points = $._0,
            grid$ = $._1;
            var $ = _U.eq(_v3.grid,
            grid$) ? {ctor: "_Tuple2"
                     ,_0: _v3.seed
                     ,_1: grid$} : A2(addRandomCell,
            _v3.seed,
            grid$),
            seed$ = $._0,
            grid$$ = $._1;
            return {_: {}
                   ,grid: grid$$
                   ,score: _v3.score + points
                   ,seed: seed$};
         }();
      }();
   });
   var GameState = F3(function (a,
   b,
   c) {
      return {_: {}
             ,grid: a
             ,score: c
             ,seed: b};
   });
   _elm.Models.GameState.values = {_op: _op
                                  ,GameState: GameState
                                  ,nth: nth
                                  ,initial: initial
                                  ,addRandomCell: addRandomCell
                                  ,update: update};
   return _elm.Models.GameState.values;
};