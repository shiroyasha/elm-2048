Elm.Models = Elm.Models || {};
Elm.Models.GameState = Elm.Models.GameState || {};
Elm.Models.GameState.make = function (_elm) {
   "use strict";
   _elm.Models = _elm.Models || {};
   _elm.Models.GameState = _elm.Models.GameState || {};
   if (_elm.Models.GameState.values)
   return _elm.Models.GameState.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Models.GameState",
   $Basics = Elm.Basics.make(_elm),
   $Input = Elm.Input.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Models$Grid = Elm.Models.Grid.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var addCell = F2(function (originalGame,
   game) {
      return function () {
         var $ = _U.eq(originalGame.grid,
         game.grid) ? {ctor: "_Tuple2"
                      ,_0: game.seed
                      ,_1: game.grid} : A2($Models$Grid.addRandomCell,
         game.seed,
         game.grid),
         seed$ = $._0,
         grid$ = $._1;
         return _U.replace([["seed"
                            ,seed$]
                           ,["grid",grid$]],
         game);
      }();
   });
   var applyAction = F2(function (action,
   game) {
      return function () {
         var $ = A2($Models$Grid.update,
         action,
         game.grid),
         points = $._0,
         grid$ = $._1;
         return _U.replace([["score"
                            ,game.score + points]
                           ,["grid",grid$]],
         game);
      }();
   });
   var won = function (grid) {
      return A2($List.any,
      F2(function (x,y) {
         return _U.eq(x,y);
      })(2048),
      $Models$Grid.numbers(grid));
   };
   var lost = function (grid) {
      return function () {
         var movements = _L.fromArray([$Models$Grid.SquashLeft
                                      ,$Models$Grid.SquashRight
                                      ,$Models$Grid.SquashUp
                                      ,$Models$Grid.SquashDown]);
         var grids = A2($List.map,
         function (movement) {
            return $Basics.snd(A2($Models$Grid.update,
            movement,
            grid));
         },
         movements);
         return A2($List.all,
         F2(function (x,y) {
            return _U.eq(x,y);
         })(grid),
         grids);
      }();
   };
   var GameState = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,grid: a
             ,phase: d
             ,score: c
             ,seed: b};
   });
   var Won = {ctor: "Won"};
   var GameOver = {ctor: "GameOver"};
   var updatePhase = function (game) {
      return function () {
         var phase$ = won(game.grid) ? Won : lost(game.grid) ? GameOver : game.phase;
         return _U.replace([["phase"
                            ,phase$]],
         game);
      }();
   };
   var InProgress = {ctor: "InProgress"};
   var initial = function (seed) {
      return function () {
         var empty = A2($Models$Grid.emptyGrid,
         4,
         4);
         var $ = $Models$Grid.addRandomCell(seed)(empty),
         seed$ = $._0,
         grid$ = $._1;
         var $ = $Models$Grid.addRandomCell(seed$)(grid$),
         seed$$ = $._0,
         grid$$ = $._1;
         return {_: {}
                ,grid: grid$$
                ,phase: InProgress
                ,score: 0
                ,seed: seed$$};
      }();
   };
   var update = F2(function (input,
   game) {
      return function () {
         switch (input.ctor)
         {case "Movement":
            return function () {
                 switch (input._0.ctor)
                 {case "NoAction": return game;}
                 return updatePhase(addCell(game)(applyAction(input._0)(game)));
              }();
            case "NewGame":
            switch (input._0.ctor)
              {case "_Tuple0":
                 return initial(game.seed);}
              break;}
         _U.badCase($moduleName,
         "between lines 74 and 79");
      }();
   });
   _elm.Models.GameState.values = {_op: _op
                                  ,InProgress: InProgress
                                  ,GameOver: GameOver
                                  ,Won: Won
                                  ,GameState: GameState
                                  ,initial: initial
                                  ,lost: lost
                                  ,won: won
                                  ,updatePhase: updatePhase
                                  ,applyAction: applyAction
                                  ,addCell: addCell
                                  ,update: update};
   return _elm.Models.GameState.values;
};