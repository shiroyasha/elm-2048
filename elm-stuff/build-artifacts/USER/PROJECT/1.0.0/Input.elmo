Elm.Input = Elm.Input || {};
Elm.Input.make = function (_elm) {
   "use strict";
   _elm.Input = _elm.Input || {};
   if (_elm.Input.values)
   return _elm.Input.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Input",
   $Basics = Elm.Basics.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Models$Grid = Elm.Models.Grid.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var Movement = function (a) {
      return {ctor: "Movement"
             ,_0: a};
   };
   var NewGame = function (a) {
      return {ctor: "NewGame"
             ,_0: a};
   };
   var newGame = $Signal.mailbox({ctor: "_Tuple0"});
   var keyboard = function () {
      var toAction = function (_v0) {
         return function () {
            return function () {
               var _v2 = {ctor: "_Tuple2"
                         ,_0: _v0.x
                         ,_1: _v0.y};
               switch (_v2.ctor)
               {case "_Tuple2": switch (_v2._0)
                    {case -1: switch (_v2._1)
                         {case 0:
                            return $Models$Grid.SquashLeft;}
                         break;
                       case 0: switch (_v2._1)
                         {case -1:
                            return $Models$Grid.SquashUp;
                            case 1:
                            return $Models$Grid.SquashDown;}
                         break;
                       case 1: switch (_v2._1)
                         {case 0:
                            return $Models$Grid.SquashRight;}
                         break;}
                    break;}
               return $Models$Grid.NoAction;
            }();
         }();
      };
      return A2($Signal.map,
      toAction,
      $Keyboard.arrows);
   }();
   var input = A2($Signal.merge,
   A2($Signal._op["<~"],
   NewGame,
   newGame.signal),
   A2($Signal._op["<~"],
   Movement,
   keyboard));
   _elm.Input.values = {_op: _op
                       ,keyboard: keyboard
                       ,newGame: newGame
                       ,NewGame: NewGame
                       ,Movement: Movement
                       ,input: input};
   return _elm.Input.values;
};