Elm.List = Elm.List || {};
Elm.List.Extra = Elm.List.Extra || {};
Elm.List.Extra.make = function (_elm) {
   "use strict";
   _elm.List = _elm.List || {};
   _elm.List.Extra = _elm.List.Extra || {};
   if (_elm.List.Extra.values)
   return _elm.List.Extra.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "List.Extra",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var zip5 = $List.map5(F5(function (v0,
   v1,
   v2,
   v3,
   v4) {
      return {ctor: "_Tuple5"
             ,_0: v0
             ,_1: v1
             ,_2: v2
             ,_3: v3
             ,_4: v4};
   }));
   var zip4 = $List.map4(F4(function (v0,
   v1,
   v2,
   v3) {
      return {ctor: "_Tuple4"
             ,_0: v0
             ,_1: v1
             ,_2: v2
             ,_3: v3};
   }));
   var zip3 = $List.map3(F3(function (v0,
   v1,
   v2) {
      return {ctor: "_Tuple3"
             ,_0: v0
             ,_1: v1
             ,_2: v2};
   }));
   var zip = $List.map2(F2(function (v0,
   v1) {
      return {ctor: "_Tuple2"
             ,_0: v0
             ,_1: v1};
   }));
   var isPrefixOf = function (prefix) {
      return function ($) {
         return $List.all($Basics.identity)(A2($List.map2,
         F2(function (x,y) {
            return _U.eq(x,y);
         }),
         prefix)($));
      };
   };
   var isSuffixOf = F2(function (suffix,
   xs) {
      return A2(isPrefixOf,
      $List.reverse(suffix),
      $List.reverse(xs));
   });
   var selectSplit = function (xs) {
      return function () {
         switch (xs.ctor)
         {case "::":
            return A2($List._op["::"],
              {ctor: "_Tuple3"
              ,_0: _L.fromArray([])
              ,_1: xs._0
              ,_2: xs._1},
              A2($List.map,
              function (_v3) {
                 return function () {
                    switch (_v3.ctor)
                    {case "_Tuple3":
                       return {ctor: "_Tuple3"
                              ,_0: A2($List._op["::"],
                              xs._0,
                              _v3._0)
                              ,_1: _v3._1
                              ,_2: _v3._2};}
                    _U.badCase($moduleName,
                    "on line 534, column 49 to 61");
                 }();
              },
              selectSplit(xs._1)));
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 532 and 534");
      }();
   };
   var select = function (xs) {
      return function () {
         switch (xs.ctor)
         {case "::":
            return A2($List._op["::"],
              {ctor: "_Tuple2"
              ,_0: xs._0
              ,_1: xs._1},
              A2($List.map,
              function (_v11) {
                 return function () {
                    switch (_v11.ctor)
                    {case "_Tuple2":
                       return {ctor: "_Tuple2"
                              ,_0: _v11._0
                              ,_1: A2($List._op["::"],
                              xs._0,
                              _v11._1)};}
                    _U.badCase($moduleName,
                    "on line 524, column 41 to 48");
                 }();
              },
              select(xs._1)));
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 522 and 524");
      }();
   };
   var tails = A2($List.foldr,
   F2(function (e,_v15) {
      return function () {
         switch (_v15.ctor)
         {case "::":
            return A2($List._op["::"],
              A2($List._op["::"],e,_v15._0),
              A2($List._op["::"],
              _v15._0,
              _v15._1));}
         _U.badCase($moduleName,
         "on line 514, column 31 to 43");
      }();
   }),
   _L.fromArray([_L.fromArray([])]));
   var isInfixOf = F2(function (infix,
   xs) {
      return A2($List.any,
      isPrefixOf(infix),
      tails(xs));
   });
   var inits = A2($List.foldr,
   F2(function (e,acc) {
      return A2($List._op["::"],
      _L.fromArray([]),
      A2($List.map,
      F2(function (x,y) {
         return A2($List._op["::"],
         x,
         y);
      })(e),
      acc));
   }),
   _L.fromArray([_L.fromArray([])]));
   var groupByTransitive = F2(function (cmp,
   xs$) {
      return function () {
         switch (xs$.ctor)
         {case "::": switch (xs$._1.ctor)
              {case "::": return function () {
                      var _ = A2(groupByTransitive,
                      cmp,
                      xs$._1);
                      var r = function () {
                         switch (_.ctor)
                         {case "::": return _;}
                         _U.badCase($moduleName,
                         "on line 497, column 28 to 52");
                      }();
                      var y = function () {
                         switch (_.ctor)
                         {case "::": return _._0;}
                         _U.badCase($moduleName,
                         "on line 497, column 28 to 52");
                      }();
                      var ys = function () {
                         switch (_.ctor)
                         {case "::": return _._1;}
                         _U.badCase($moduleName,
                         "on line 497, column 28 to 52");
                      }();
                      return A2(cmp,
                      xs$._0,
                      xs$._1._0) ? A2($List._op["::"],
                      A2($List._op["::"],xs$._0,y),
                      ys) : A2($List._op["::"],
                      _L.fromArray([xs$._0]),
                      r);
                   }();
                 case "[]":
                 return _L.fromArray([_L.fromArray([xs$._0])]);}
              break;
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 493 and 500");
      }();
   });
   var stripPrefix = F2(function (prefix,
   xs) {
      return function () {
         var step = F2(function (e,
         m) {
            return function () {
               switch (m.ctor)
               {case "Just": switch (m._0.ctor)
                    {case "::": return _U.eq(e,
                         m._0._0) ? $Maybe.Just(m._0._1) : $Maybe.Nothing;
                       case "[]":
                       return $Maybe.Nothing;}
                    break;
                  case "Nothing":
                  return $Maybe.Nothing;}
               _U.badCase($moduleName,
               "between lines 454 and 460");
            }();
         });
         return A3($List.foldl,
         step,
         $Maybe.Just(xs),
         prefix);
      }();
   });
   var dropWhileEnd = function (p) {
      return A2($List.foldr,
      F2(function (x,xs) {
         return p(x) && $List.isEmpty(xs) ? _L.fromArray([]) : A2($List._op["::"],
         x,
         xs);
      }),
      _L.fromArray([]));
   };
   var takeWhileEnd = function (p) {
      return function () {
         var step = F2(function (x,
         _v37) {
            return function () {
               switch (_v37.ctor)
               {case "_Tuple2":
                  return p(x) && _v37._1 ? {ctor: "_Tuple2"
                                           ,_0: A2($List._op["::"],
                                           x,
                                           _v37._0)
                                           ,_1: true} : {ctor: "_Tuple2"
                                                        ,_0: _v37._0
                                                        ,_1: false};}
               _U.badCase($moduleName,
               "on line 413, column 24 to 73");
            }();
         });
         return function ($) {
            return $Basics.fst(A2($List.foldr,
            step,
            {ctor: "_Tuple2"
            ,_0: _L.fromArray([])
            ,_1: true})($));
         };
      }();
   };
   var splitAt = F2(function (n,
   xs) {
      return {ctor: "_Tuple2"
             ,_0: A2($List.take,n,xs)
             ,_1: A2($List.drop,n,xs)};
   });
   var unfoldr = F2(function (f,
   seed) {
      return function () {
         var _v41 = f(seed);
         switch (_v41.ctor)
         {case "Just":
            switch (_v41._0.ctor)
              {case "_Tuple2":
                 return A2($List._op["::"],
                   _v41._0._0,
                   A2(unfoldr,f,_v41._0._1));}
              break;
            case "Nothing":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 390 and 392");
      }();
   });
   var scanr1 = F2(function (f,
   xs$) {
      return function () {
         switch (xs$.ctor)
         {case "::": switch (xs$._1.ctor)
              {case "[]":
                 return _L.fromArray([xs$._0]);}
              return function () {
                 var _ = A2(scanr1,f,xs$._1);
                 var q = function () {
                    switch (_.ctor)
                    {case "::": return _._0;}
                    _U.badCase($moduleName,
                    "on line 381, column 37 to 48");
                 }();
                 var qs = function () {
                    switch (_.ctor)
                    {case "::": return _;}
                    _U.badCase($moduleName,
                    "on line 381, column 37 to 48");
                 }();
                 return A2($List._op["::"],
                 A2(f,xs$._0,q),
                 qs);
              }();
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 378 and 382");
      }();
   });
   var scanr = F3(function (f,
   acc,
   xs$) {
      return function () {
         switch (xs$.ctor)
         {case "::": return function () {
                 var _ = A3(scanr,
                 f,
                 acc,
                 xs$._1);
                 var q = function () {
                    switch (_.ctor)
                    {case "::": return _._0;}
                    _U.badCase($moduleName,
                    "on line 367, column 37 to 51");
                 }();
                 var qs = function () {
                    switch (_.ctor)
                    {case "::": return _;}
                    _U.badCase($moduleName,
                    "on line 367, column 37 to 51");
                 }();
                 return A2($List._op["::"],
                 A2(f,xs$._0,q),
                 qs);
              }();
            case "[]":
            return _L.fromArray([acc]);}
         _U.badCase($moduleName,
         "between lines 365 and 368");
      }();
   });
   var scanl1 = F2(function (f,
   xs$) {
      return function () {
         switch (xs$.ctor)
         {case "::":
            return A3($List.scanl,
              f,
              xs$._0,
              xs$._1);
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 350 and 352");
      }();
   });
   var foldr1 = F2(function (f,
   xs) {
      return function () {
         var mf = F2(function (x,m) {
            return $Maybe.Just(function () {
               switch (m.ctor)
               {case "Just": return A2(f,
                    x,
                    m._0);
                  case "Nothing": return x;}
               _U.badCase($moduleName,
               "between lines 329 and 331");
            }());
         });
         return A3($List.foldr,
         mf,
         $Maybe.Nothing,
         xs);
      }();
   });
   var foldl1 = F2(function (f,
   xs) {
      return function () {
         var mf = F2(function (x,m) {
            return $Maybe.Just(function () {
               switch (m.ctor)
               {case "Just": return A2(f,
                    m._0,
                    x);
                  case "Nothing": return x;}
               _U.badCase($moduleName,
               "between lines 314 and 316");
            }());
         });
         return A3($List.foldl,
         mf,
         $Maybe.Nothing,
         xs);
      }();
   });
   var permutations = function (xs$) {
      return function () {
         switch (xs$.ctor)
         {case "[]":
            return _L.fromArray([_L.fromArray([])]);}
         return function () {
            var f = function (_v71) {
               return function () {
                  switch (_v71.ctor)
                  {case "_Tuple2":
                     return A2($List.map,
                       F2(function (x,y) {
                          return A2($List._op["::"],
                          x,
                          y);
                       })(_v71._0),
                       permutations(_v71._1));}
                  _U.badCase($moduleName,
                  "on line 302, column 26 to 54");
               }();
            };
            return A2($List.concatMap,
            f,
            select(xs$));
         }();
      }();
   };
   var isPermutationOf = F2(function (permut,
   xs) {
      return A2($List.member,
      permut,
      permutations(xs));
   });
   var subsequencesNonEmpty = function (xs) {
      return function () {
         switch (xs.ctor)
         {case "::": return function () {
                 var f = F2(function (ys,r) {
                    return A2($List._op["::"],
                    ys,
                    A2($List._op["::"],
                    A2($List._op["::"],xs._0,ys),
                    r));
                 });
                 return A2($List._op["::"],
                 _L.fromArray([xs._0]),
                 A3($List.foldr,
                 f,
                 _L.fromArray([]),
                 subsequencesNonEmpty(xs._1)));
              }();
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 288 and 292");
      }();
   };
   var subsequences = function (xs) {
      return A2($List._op["::"],
      _L.fromArray([]),
      subsequencesNonEmpty(xs));
   };
   var isSubsequenceOf = F2(function (subseq,
   xs) {
      return A2($List.member,
      subseq,
      subsequences(xs));
   });
   var transpose = function (ll) {
      return function () {
         switch (ll.ctor)
         {case "::": switch (ll._0.ctor)
              {case "::": return function () {
                      var tails = A2($List.filterMap,
                      $List.tail,
                      ll._1);
                      var heads = A2($List.filterMap,
                      $List.head,
                      ll._1);
                      return A2($List._op["::"],
                      A2($List._op["::"],
                      ll._0._0,
                      heads),
                      transpose(A2($List._op["::"],
                      ll._0._1,
                      tails)));
                   }();
                 case "[]":
                 return transpose(ll._1);}
              break;
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 265 and 273");
      }();
   };
   var intercalate = function (xs) {
      return function ($) {
         return $List.concat($List.intersperse(xs)($));
      };
   };
   var replaceIf = F3(function (predicate,
   replacement,
   list) {
      return A2($List.map,
      function (item) {
         return predicate(item) ? replacement : item;
      },
      list);
   });
   var findIndices = function (p) {
      return function ($) {
         return $List.map($Basics.fst)($List.filter(function (_v83) {
            return function () {
               switch (_v83.ctor)
               {case "_Tuple2":
                  return p(_v83._1);}
               _U.badCase($moduleName,
               "on line 240, column 46 to 49");
            }();
         })($List.indexedMap(F2(function (v0,
         v1) {
            return {ctor: "_Tuple2"
                   ,_0: v0
                   ,_1: v1};
         }))($)));
      };
   };
   var findIndex = function (p) {
      return function ($) {
         return $List.head(findIndices(p)($));
      };
   };
   var elemIndices = function (x) {
      return findIndices(F2(function (x,
      y) {
         return _U.eq(x,y);
      })(x));
   };
   var elemIndex = function (x) {
      return findIndex(F2(function (x,
      y) {
         return _U.eq(x,y);
      })(x));
   };
   var find = F2(function (predicate,
   list) {
      return function () {
         switch (list.ctor)
         {case "::":
            return predicate(list._0) ? $Maybe.Just(list._0) : A2(find,
              predicate,
              list._1);
            case "[]":
            return $Maybe.Nothing;}
         _U.badCase($moduleName,
         "between lines 196 and 204");
      }();
   });
   var notMember = function (x) {
      return function ($) {
         return $Basics.not($List.member(x)($));
      };
   };
   var andThen = $Basics.flip($List.concatMap);
   var lift2 = F3(function (f,
   la,
   lb) {
      return A2(andThen,
      la,
      function (a) {
         return A2(andThen,
         lb,
         function (b) {
            return _L.fromArray([A2(f,
            a,
            b)]);
         });
      });
   });
   var lift3 = F4(function (f,
   la,
   lb,
   lc) {
      return A2(andThen,
      la,
      function (a) {
         return A2(andThen,
         lb,
         function (b) {
            return A2(andThen,
            lc,
            function (c) {
               return _L.fromArray([A3(f,
               a,
               b,
               c)]);
            });
         });
      });
   });
   var lift4 = F5(function (f,
   la,
   lb,
   lc,
   ld) {
      return A2(andThen,
      la,
      function (a) {
         return A2(andThen,
         lb,
         function (b) {
            return A2(andThen,
            lc,
            function (c) {
               return A2(andThen,
               ld,
               function (d) {
                  return _L.fromArray([A4(f,
                  a,
                  b,
                  c,
                  d)]);
               });
            });
         });
      });
   });
   var andMap = F2(function (fl,
   l) {
      return A3($List.map2,
      F2(function (x,y) {
         return x(y);
      }),
      fl,
      l);
   });
   var dropDuplicates = function (list) {
      return function () {
         var step = F2(function (next,
         _v90) {
            return function () {
               switch (_v90.ctor)
               {case "_Tuple2":
                  return A2($Set.member,
                    next,
                    _v90._0) ? {ctor: "_Tuple2"
                               ,_0: _v90._0
                               ,_1: _v90._1} : {ctor: "_Tuple2"
                                               ,_0: A2($Set.insert,
                                               next,
                                               _v90._0)
                                               ,_1: A2($List._op["::"],
                                               next,
                                               _v90._1)};}
               _U.badCase($moduleName,
               "between lines 136 and 138");
            }();
         });
         return $List.reverse($Basics.snd(A3($List.foldl,
         step,
         {ctor: "_Tuple2"
         ,_0: $Set.empty
         ,_1: _L.fromArray([])},
         list)));
      }();
   };
   var dropWhile = F2(function (predicate,
   list) {
      return function () {
         switch (list.ctor)
         {case "::":
            return predicate(list._0) ? A2(dropWhile,
              predicate,
              list._1) : list;
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 125 and 128");
      }();
   });
   var takeWhile = F2(function (predicate,
   list) {
      return function () {
         switch (list.ctor)
         {case "::":
            return predicate(list._0) ? A2($List._op["::"],
              list._0,
              A2(takeWhile,
              predicate,
              list._1)) : _L.fromArray([]);
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 116 and 119");
      }();
   });
   var span = F2(function (p,xs) {
      return {ctor: "_Tuple2"
             ,_0: A2(takeWhile,p,xs)
             ,_1: A2(dropWhile,p,xs)};
   });
   var $break = function (p) {
      return span(function ($) {
         return $Basics.not(p($));
      });
   };
   var groupBy = F2(function (eq,
   xs$) {
      return function () {
         switch (xs$.ctor)
         {case "::": return function () {
                 var $ = A2(span,
                 eq(xs$._0),
                 xs$._1),
                 ys = $._0,
                 zs = $._1;
                 return A2($List._op["::"],
                 A2($List._op["::"],xs$._0,ys),
                 A2(groupBy,eq,zs));
              }();
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 482 and 485");
      }();
   });
   var group = groupBy(F2(function (x,
   y) {
      return _U.eq(x,y);
   }));
   var minimumBy = F2(function (f,
   ls) {
      return function () {
         var minBy = F3(function (f,
         x,
         y) {
            return _U.cmp(f(x),
            f(y)) < 0 ? x : y;
         });
         return function () {
            switch (ls.ctor)
            {case "::":
               return $Maybe.Just(A3($List.foldl,
                 minBy(f),
                 ls._0,
                 ls._1));}
            return $Maybe.Nothing;
         }();
      }();
   });
   var maximumBy = F2(function (f,
   ls) {
      return function () {
         var maxBy = F3(function (f,
         x,
         y) {
            return _U.cmp(f(x),
            f(y)) > 0 ? x : y;
         });
         return function () {
            switch (ls.ctor)
            {case "::":
               return $Maybe.Just(A3($List.foldl,
                 maxBy(f),
                 ls._0,
                 ls._1));}
            return $Maybe.Nothing;
         }();
      }();
   });
   var uncons = function (xs) {
      return function () {
         switch (xs.ctor)
         {case "::":
            return $Maybe.Just({ctor: "_Tuple2"
                               ,_0: xs._0
                               ,_1: xs._1});
            case "[]":
            return $Maybe.Nothing;}
         _U.badCase($moduleName,
         "between lines 90 and 92");
      }();
   };
   var init = function () {
      var maybe = F2(function (d,
      f) {
         return function ($) {
            return $Maybe.withDefault(d)($Maybe.map(f)($));
         };
      });
      return A2($List.foldr,
      function ($) {
         return F2(function (x,y) {
            return function ($) {
               return x(y($));
            };
         })($Maybe.Just)(maybe(_L.fromArray([]))(F2(function (x,
         y) {
            return A2($List._op["::"],
            x,
            y);
         })($)));
      },
      $Maybe.Nothing);
   }();
   var last = foldl1($Basics.flip($Basics.always));
   _elm.List.Extra.values = {_op: _op
                            ,last: last
                            ,init: init
                            ,uncons: uncons
                            ,minimumBy: minimumBy
                            ,maximumBy: maximumBy
                            ,andMap: andMap
                            ,andThen: andThen
                            ,takeWhile: takeWhile
                            ,dropWhile: dropWhile
                            ,dropDuplicates: dropDuplicates
                            ,replaceIf: replaceIf
                            ,intercalate: intercalate
                            ,transpose: transpose
                            ,subsequences: subsequences
                            ,permutations: permutations
                            ,foldl1: foldl1
                            ,foldr1: foldr1
                            ,scanl1: scanl1
                            ,scanr: scanr
                            ,scanr1: scanr1
                            ,unfoldr: unfoldr
                            ,splitAt: splitAt
                            ,takeWhileEnd: takeWhileEnd
                            ,dropWhileEnd: dropWhileEnd
                            ,span: span
                            ,$break: $break
                            ,stripPrefix: stripPrefix
                            ,group: group
                            ,groupBy: groupBy
                            ,groupByTransitive: groupByTransitive
                            ,inits: inits
                            ,tails: tails
                            ,select: select
                            ,selectSplit: selectSplit
                            ,isPrefixOf: isPrefixOf
                            ,isSuffixOf: isSuffixOf
                            ,isInfixOf: isInfixOf
                            ,isSubsequenceOf: isSubsequenceOf
                            ,isPermutationOf: isPermutationOf
                            ,notMember: notMember
                            ,find: find
                            ,elemIndex: elemIndex
                            ,elemIndices: elemIndices
                            ,findIndex: findIndex
                            ,findIndices: findIndices
                            ,zip: zip
                            ,zip3: zip3
                            ,zip4: zip4
                            ,zip5: zip5
                            ,lift2: lift2
                            ,lift3: lift3
                            ,lift4: lift4};
   return _elm.List.Extra.values;
};