Elm.Easing = Elm.Easing || {};
Elm.Easing.make = function (_elm) {
   "use strict";
   _elm.Easing = _elm.Easing || {};
   if (_elm.Easing.values)
   return _elm.Easing.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Easing",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var cycle = F3(function (animation,
   d,
   t) {
      return A2(animation,
      1,
      t / d - $Basics.toFloat($Basics.floor(t / d)));
   });
   var flip = F2(function (easing,
   time) {
      return easing(1 - time);
   });
   var retour = F2(function (easing,
   time) {
      return _U.cmp(time,
      0.5) < 0 ? easing(time * 2) : flip(easing)((time - 0.5) * 2);
   });
   var invert = F2(function (easing,
   time) {
      return 1 - easing(1 - time);
   });
   var inOut = F3(function (e1,
   e2,
   time) {
      return _U.cmp(time,
      0.5) < 0 ? e1(time * 2) / 2 : 0.5 + e2((time - 0.5) * 2) / 2;
   });
   var easeInElastic = function (time) {
      return function () {
         var t$ = time - 1;
         var p = 0.3;
         var s = 7.5e-2;
         return 0 - Math.pow(2,
         10 * t$) * $Basics.sin((t$ - s) * (2 * $Basics.pi) / p);
      }();
   };
   var easeOutElastic = invert(easeInElastic);
   var easeInOutElastic = A2(inOut,
   easeInElastic,
   easeOutElastic);
   var easeOutBounce = function (time) {
      return function () {
         var t4 = time - 2.65 / 2.75;
         var t3 = time - 2.25 / 2.75;
         var t2 = time - 1.5 / 2.75;
         var a = 7.5625;
         return _U.cmp(time,
         1 / 2.75) < 0 ? a * time * time : _U.cmp(time,
         2 / 2.75) < 0 ? a * t2 * t2 + 0.75 : _U.cmp(time,
         2.5 / 2.75) < 0 ? a * t3 * t3 + 0.9375 : a * t4 * t4 + 0.984375;
      }();
   };
   var easeInBounce = invert(easeOutBounce);
   var easeInOutBounce = A2(inOut,
   easeInBounce,
   easeOutBounce);
   var easeInBack = function (time) {
      return time * time * (2.70158 * time - 1.70158);
   };
   var easeOutBack = invert(easeInBack);
   var easeInOutBack = A2(inOut,
   easeInBack,
   easeOutBack);
   var easeOutCirc = function (time) {
      return $Basics.sqrt(1 - Math.pow(time - 1,
      2));
   };
   var easeInCirc = invert(easeOutCirc);
   var easeInOutCirc = A2(inOut,
   easeInCirc,
   easeOutCirc);
   var easeInExpo = function (time) {
      return Math.pow(2,
      10 * (time - 1));
   };
   var easeOutExpo = invert(easeInExpo);
   var easeInOutExpo = A2(inOut,
   easeInExpo,
   easeOutExpo);
   var easeOutSine = function (time) {
      return $Basics.sin(time * ($Basics.pi / 2));
   };
   var easeInSine = invert(easeOutSine);
   var easeInOutSine = A2(inOut,
   easeInSine,
   easeOutSine);
   var easeInQuint = function (time) {
      return Math.pow(time,5);
   };
   var easeOutQuint = invert(easeInQuint);
   var easeInOutQuint = A2(inOut,
   easeInQuint,
   easeOutQuint);
   var easeInQuart = function (time) {
      return Math.pow(time,4);
   };
   var easeOutQuart = invert(easeInQuart);
   var easeInOutQuart = A2(inOut,
   easeInQuart,
   easeOutQuart);
   var easeInCubic = function (time) {
      return Math.pow(time,3);
   };
   var easeOutCubic = invert(easeInCubic);
   var easeInOutCubic = A2(inOut,
   easeInCubic,
   easeOutCubic);
   var easeInQuad = function (time) {
      return Math.pow(time,2);
   };
   var easeOutQuad = invert(easeInQuad);
   var easeInOutQuad = A2(inOut,
   easeInQuad,
   easeOutQuad);
   var linear = $Basics.identity;
   var pair = F4(function (interpolate,
   _v0,
   _v1,
   v) {
      return function () {
         switch (_v1.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v0.ctor)
                 {case "_Tuple2":
                    return {ctor: "_Tuple2"
                           ,_0: A3(interpolate,
                           _v0._0,
                           _v1._0,
                           v)
                           ,_1: A3(interpolate,
                           _v0._1,
                           _v1._1,
                           v)};}
                 _U.badCase($moduleName,
                 "on line 150, column 6 to 46");
              }();}
         _U.badCase($moduleName,
         "on line 150, column 6 to 46");
      }();
   });
   var $float = F3(function (from,
   to,
   v) {
      return from + (to - from) * v;
   });
   var point2d = F3(function (from,
   to,
   v) {
      return {_: {}
             ,x: A3($float,from.x,to.x,v)
             ,y: A3($float,from.y,to.y,v)};
   });
   var point3d = F3(function (from,
   to,
   v) {
      return {_: {}
             ,x: A3($float,from.x,to.x,v)
             ,y: A3($float,from.y,to.y,v)
             ,z: A3($float,from.z,to.z,v)};
   });
   var color = F3(function (from,
   to,
   v) {
      return function () {
         var float$ = F3(function (from,
         to,
         v) {
            return $Basics.round(A3($float,
            $Basics.toFloat(from),
            $Basics.toFloat(to),
            v));
         });
         var $ = {ctor: "_Tuple2"
                 ,_0: $Color.toRgb(from)
                 ,_1: $Color.toRgb(to)},
         rgb1 = $._0,
         rgb2 = $._1;
         var $ = {ctor: "_Tuple4"
                 ,_0: rgb1.red
                 ,_1: rgb1.green
                 ,_2: rgb1.blue
                 ,_3: rgb1.alpha},
         r1 = $._0,
         g1 = $._1,
         b1 = $._2,
         a1 = $._3;
         var $ = {ctor: "_Tuple4"
                 ,_0: rgb2.red
                 ,_1: rgb2.green
                 ,_2: rgb2.blue
                 ,_3: rgb2.alpha},
         r2 = $._0,
         g2 = $._1,
         b2 = $._2,
         a2 = $._3;
         return A4($Color.rgba,
         A3(float$,r1,r2,v),
         A3(float$,g1,g2,v),
         A3(float$,b1,b2,v),
         A3($float,a1,a2,v));
      }();
   });
   var bezier = F5(function (x1,
   y1,
   x2,
   y2,
   time) {
      return function () {
         var casteljau = function (ps) {
            return function () {
               switch (ps.ctor)
               {case "::": switch (ps._0.ctor)
                    {case "_Tuple2":
                       switch (ps._1.ctor)
                         {case "[]": return ps._0._1;}
                         break;}
                    break;}
               return casteljau(A3($List.map2,
               F2(function (x,y) {
                  return A4(pair,
                  $float,
                  x,
                  y,
                  time);
               }),
               ps,
               A2($Maybe.withDefault,
               _L.fromArray([]),
               $List.tail(ps))));
            }();
         };
         return casteljau(_L.fromArray([{ctor: "_Tuple2"
                                        ,_0: 0
                                        ,_1: 0}
                                       ,{ctor: "_Tuple2",_0: x1,_1: y1}
                                       ,{ctor: "_Tuple2",_0: x2,_1: y2}
                                       ,{ctor: "_Tuple2"
                                        ,_0: 1
                                        ,_1: 1}]));
      }();
   });
   var ease = F6(function (easing,
   interpolation,
   from,
   to,
   duration,
   time) {
      return A3(interpolation,
      from,
      to,
      easing(A2($Basics.min,
      time / duration,
      1)));
   });
   _elm.Easing.values = {_op: _op
                        ,ease: ease
                        ,$float: $float
                        ,point2d: point2d
                        ,point3d: point3d
                        ,color: color
                        ,pair: pair
                        ,cycle: cycle
                        ,invert: invert
                        ,retour: retour
                        ,inOut: inOut
                        ,flip: flip
                        ,bezier: bezier
                        ,linear: linear
                        ,easeInQuad: easeInQuad
                        ,easeOutQuad: easeOutQuad
                        ,easeInOutQuad: easeInOutQuad
                        ,easeInCubic: easeInCubic
                        ,easeOutCubic: easeOutCubic
                        ,easeInOutCubic: easeInOutCubic
                        ,easeInQuart: easeInQuart
                        ,easeOutQuart: easeOutQuart
                        ,easeInOutQuart: easeInOutQuart
                        ,easeInQuint: easeInQuint
                        ,easeOutQuint: easeOutQuint
                        ,easeInOutQuint: easeInOutQuint
                        ,easeInSine: easeInSine
                        ,easeOutSine: easeOutSine
                        ,easeInOutSine: easeInOutSine
                        ,easeInExpo: easeInExpo
                        ,easeOutExpo: easeOutExpo
                        ,easeInOutExpo: easeInOutExpo
                        ,easeInCirc: easeInCirc
                        ,easeOutCirc: easeOutCirc
                        ,easeInOutCirc: easeInOutCirc
                        ,easeInBack: easeInBack
                        ,easeOutBack: easeOutBack
                        ,easeInOutBack: easeInOutBack
                        ,easeInBounce: easeInBounce
                        ,easeOutBounce: easeOutBounce
                        ,easeInOutBounce: easeInOutBounce
                        ,easeInElastic: easeInElastic
                        ,easeOutElastic: easeOutElastic
                        ,easeInOutElastic: easeInOutElastic};
   return _elm.Easing.values;
};