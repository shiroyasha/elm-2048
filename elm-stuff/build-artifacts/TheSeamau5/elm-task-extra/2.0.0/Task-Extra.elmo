Elm.Task = Elm.Task || {};
Elm.Task.Extra = Elm.Task.Extra || {};
Elm.Task.Extra.make = function (_elm) {
   "use strict";
   _elm.Task = _elm.Task || {};
   _elm.Task.Extra = _elm.Task.Extra || {};
   if (_elm.Task.Extra.values)
   return _elm.Task.Extra.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Task.Extra",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Task = Elm.Task.make(_elm),
   $Time = Elm.Time.make(_elm);
   var computeLazyAsync = F2(function (address,
   lazy) {
      return A2($Task.andThen,
      $Task.spawn(A2($Task.andThen,
      $Task.succeed(lazy),
      function (f) {
         return A2($Task.andThen,
         $Task.succeed(f({ctor: "_Tuple0"})),
         function (value) {
            return A2($Signal.send,
            address,
            value);
         });
      })),
      function (_v0) {
         return function () {
            return $Task.succeed({ctor: "_Tuple0"});
         }();
      });
   });
   var interceptError = F2(function (failAddress,
   task) {
      return A2($Task.onError,
      task,
      function (error) {
         return A2($Task.andThen,
         A2($Signal.send,
         failAddress,
         error),
         function (_v2) {
            return function () {
               return $Task.fail(error);
            }();
         });
      });
   });
   var interceptSuccess = F2(function (successAddress,
   task) {
      return A2($Task.andThen,
      task,
      function (value) {
         return A2($Task.andThen,
         A2($Signal.send,
         successAddress,
         value),
         function (_v4) {
            return function () {
               return $Task.succeed(value);
            }();
         });
      });
   });
   var intercept = F2(function (address,
   task) {
      return A2($Task.andThen,
      A2($Task.onError,
      task,
      function (error) {
         return A2($Task.andThen,
         A2($Signal.send,
         address,
         $Result.Err(error)),
         function (_v6) {
            return function () {
               return $Task.fail(error);
            }();
         });
      }),
      function (value) {
         return A2($Task.andThen,
         A2($Signal.send,
         address,
         $Result.Ok(value)),
         function (_v8) {
            return function () {
               return $Task.succeed(value);
            }();
         });
      });
   });
   var delay = F2(function (time,
   task) {
      return A2($Task.andThen,
      $Task.sleep(time),
      function (_v10) {
         return function () {
            return task;
         }();
      });
   });
   var loop = F2(function (every,
   task) {
      return A2($Task.andThen,
      task,
      function (_v12) {
         return function () {
            return A2($Task.andThen,
            $Task.sleep(every),
            function (_v14) {
               return function () {
                  return A2(loop,every,task);
               }();
            });
         }();
      });
   });
   var optional = function (list) {
      return function () {
         switch (list.ctor)
         {case "::":
            return A2($Task.onError,
              A2($Task.andThen,
              list._0,
              function (value) {
                 return A2($Task.map,
                 F2(function (x,y) {
                    return A2($List._op["::"],
                    x,
                    y);
                 })(value),
                 optional(list._1));
              }),
              function (_v19) {
                 return function () {
                    return optional(list._1);
                 }();
              });
            case "[]":
            return $Task.succeed(_L.fromArray([]));}
         _U.badCase($moduleName,
         "between lines 53 and 57");
      }();
   };
   var parallel = function (tasks) {
      return $Task.sequence(A2($List.map,
      $Task.spawn,
      tasks));
   };
   var broadcast = F2(function (addresses,
   value) {
      return A2($Task.andThen,
      parallel(A2($List.map,
      function (address) {
         return A2($Signal.send,
         address,
         value);
      },
      addresses)),
      function (_v21) {
         return function () {
            return $Task.succeed({ctor: "_Tuple0"});
         }();
      });
   });
   _elm.Task.Extra.values = {_op: _op
                            ,parallel: parallel
                            ,broadcast: broadcast
                            ,optional: optional
                            ,loop: loop
                            ,delay: delay
                            ,intercept: intercept
                            ,interceptSuccess: interceptSuccess
                            ,interceptError: interceptError
                            ,computeLazyAsync: computeLazyAsync};
   return _elm.Task.Extra.values;
};