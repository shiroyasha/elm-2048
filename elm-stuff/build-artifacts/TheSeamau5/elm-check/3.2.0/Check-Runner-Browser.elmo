Elm.Check = Elm.Check || {};
Elm.Check.Runner = Elm.Check.Runner || {};
Elm.Check.Runner.Browser = Elm.Check.Runner.Browser || {};
Elm.Check.Runner.Browser.make = function (_elm) {
   "use strict";
   _elm.Check = _elm.Check || {};
   _elm.Check.Runner = _elm.Check.Runner || {};
   _elm.Check.Runner.Browser = _elm.Check.Runner.Browser || {};
   if (_elm.Check.Runner.Browser.values)
   return _elm.Check.Runner.Browser.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Check.Runner.Browser",
   $Basics = Elm.Basics.make(_elm),
   $Check = Elm.Check.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var successMessage = function (_v0) {
      return function () {
         return A2($Basics._op["++"],
         _v0.name,
         A2($Basics._op["++"],
         " passed after ",
         A2($Basics._op["++"],
         $Basics.toString(_v0.numberOfChecks),
         " checks.")));
      }();
   };
   var isOk = function (evidence) {
      return function () {
         switch (evidence.ctor)
         {case "Multiple":
            return areOk(evidence._1);
            case "Unit":
            return function () {
                 switch (evidence._0.ctor)
                 {case "Ok": return true;}
                 return false;
              }();}
         _U.badCase($moduleName,
         "between lines 90 and 95");
      }();
   };
   var areOk = function (evidences) {
      return A2($List.all,
      F2(function (x,y) {
         return _U.eq(x,y);
      })(true),
      A2($List.map,isOk,evidences));
   };
   var nephritis = "#27ae60";
   var midnightBlue = "#2c3e50";
   var backgroundBrown = "#DDCCA1";
   var pomegranate = "#c0392b";
   var toColor = function (b) {
      return b ? nephritis : pomegranate;
   };
   _op[":::"] = F2(function (v0,
   v1) {
      return {ctor: "_Tuple2"
             ,_0: v0
             ,_1: v1};
   });
   var suiteStyle = function (b) {
      return _L.fromArray([A2(_op[":::"],
                          "display",
                          "flex")
                          ,A2(_op[":::"],
                          "flex-direction",
                          "column")
                          ,A2(_op[":::"],
                          "color",
                          toColor(b))]);
   };
   var displayStyle = _L.fromArray([A2(_op[":::"],
                                   "width",
                                   "100vw")
                                   ,A2(_op[":::"],
                                   "min-height",
                                   "100vh")
                                   ,A2(_op[":::"],
                                   "background-color",
                                   backgroundBrown)]);
   var unitStyle = function (b) {
      return _L.fromArray([A2(_op[":::"],
                          "color",
                          toColor(b))
                          ,A2(_op[":::"],
                          "margin-bottom",
                          "5px")
                          ,A2(_op[":::"],
                          "margin-top",
                          "10px")]);
   };
   var unitInnerStyle = _L.fromArray([A2(_op[":::"],
   "color",
   midnightBlue)]);
   var displayUnit = F2(function (b,
   unitEvidence) {
      return function () {
         switch (unitEvidence.ctor)
         {case "Err":
            return function () {
                 var verboseParts = $Basics.not(b) ? _L.fromArray([]) : _L.fromArray([A2($Html.li,
                                                                                     _L.fromArray([]),
                                                                                     _L.fromArray([$Html.text(A2($Basics._op["++"],
                                                                                     "Seed: ",
                                                                                     $Basics.toString(unitEvidence._0.seed.state)))]))
                                                                                     ,A2($Html.li,
                                                                                     _L.fromArray([]),
                                                                                     _L.fromArray([$Html.text(A2($Basics._op["++"],
                                                                                     "Number of shrinking operations performed: ",
                                                                                     $Basics.toString(unitEvidence._0.numberOfShrinks)))]))
                                                                                     ,A2($Html.li,
                                                                                     _L.fromArray([]),
                                                                                     _L.fromArray([$Html.text("Before shrinking: ")
                                                                                                  ,A2($Html.ul,
                                                                                                  _L.fromArray([]),
                                                                                                  _L.fromArray([A2($Html.li,
                                                                                                               _L.fromArray([]),
                                                                                                               _L.fromArray([$Html.text(A2($Basics._op["++"],
                                                                                                               "Counter example: ",
                                                                                                               unitEvidence._0.original.counterExample))]))
                                                                                                               ,A2($Html.li,
                                                                                                               _L.fromArray([]),
                                                                                                               _L.fromArray([$Html.text(A2($Basics._op["++"],
                                                                                                               "Actual: ",
                                                                                                               unitEvidence._0.original.actual))]))
                                                                                                               ,A2($Html.li,
                                                                                                               _L.fromArray([]),
                                                                                                               _L.fromArray([$Html.text(A2($Basics._op["++"],
                                                                                                               "Expected: ",
                                                                                                               unitEvidence._0.original.expected))]))]))]))]);
                 var essentialParts = _L.fromArray([A2($Html.li,
                                                   _L.fromArray([]),
                                                   _L.fromArray([$Html.text(A2($Basics._op["++"],
                                                   "Counter example: ",
                                                   unitEvidence._0.counterExample))]))
                                                   ,A2($Html.li,
                                                   _L.fromArray([]),
                                                   _L.fromArray([$Html.text(A2($Basics._op["++"],
                                                   "Actual: ",
                                                   unitEvidence._0.actual))]))
                                                   ,A2($Html.li,
                                                   _L.fromArray([]),
                                                   _L.fromArray([$Html.text(A2($Basics._op["++"],
                                                   "Expected: ",
                                                   unitEvidence._0.expected))]))]);
                 return A2($Html.li,
                 _L.fromArray([$Html$Attributes.style(unitStyle(false))]),
                 _L.fromArray([$Html.text(A2($Basics._op["++"],
                              unitEvidence._0.name,
                              A2($Basics._op["++"],
                              " FAILED after ",
                              A2($Basics._op["++"],
                              $Basics.toString(unitEvidence._0.numberOfChecks),
                              A2($Basics._op["++"],
                              " check",
                              A2($Basics._op["++"],
                              _U.eq(unitEvidence._0.numberOfChecks,
                              1) ? "" : "s",
                              "!"))))))
                              ,A2($Html.ul,
                              _L.fromArray([$Html$Attributes.style(unitInnerStyle)]),
                              A2($Basics._op["++"],
                              essentialParts,
                              verboseParts))]));
              }();
            case "Ok": return A2($Html.li,
              _L.fromArray([$Html$Attributes.style(unitStyle(true))]),
              _L.fromArray([$Html.text(successMessage(unitEvidence._0))]));}
         _U.badCase($moduleName,
         "between lines 116 and 170");
      }();
   });
   var display$ = F2(function (b,
   evidence) {
      return function () {
         switch (evidence.ctor)
         {case "Multiple":
            return A3(displaySuite,
              b,
              evidence._0,
              evidence._1);
            case "Unit":
            return A2(displayUnit,
              b,
              evidence._0);}
         _U.badCase($moduleName,
         "between lines 72 and 76");
      }();
   });
   var displaySuite = F3(function (b,
   name,
   evidences) {
      return A2($Html.li,
      _L.fromArray([$Html$Attributes.style(suiteStyle(areOk(evidences)))]),
      _L.fromArray([$Html.text(A2($Basics._op["++"],
                   "Suite: ",
                   name))
                   ,A2($Html.ol,
                   _L.fromArray([]),
                   A2($List.map,
                   display$(b),
                   evidences))]));
   });
   var display = function (evidence) {
      return A2($Html.div,
      _L.fromArray([$Html$Attributes.style(displayStyle)]),
      _L.fromArray([A2(display$,
      false,
      evidence)]));
   };
   var displayVerbose = function (evidence) {
      return A2($Html.div,
      _L.fromArray([$Html$Attributes.style(displayStyle)]),
      _L.fromArray([A2(display$,
      true,
      evidence)]));
   };
   _elm.Check.Runner.Browser.values = {_op: _op
                                      ,display: display
                                      ,displayVerbose: displayVerbose};
   return _elm.Check.Runner.Browser.values;
};