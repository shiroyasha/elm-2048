Elm.Check = Elm.Check || {};
Elm.Check.make = function (_elm) {
   "use strict";
   _elm.Check = _elm.Check || {};
   if (_elm.Check.values)
   return _elm.Check.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Check",
   $Basics = Elm.Basics.make(_elm),
   $Check$Investigator = Elm.Check.Investigator.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Trampoline = Elm.Trampoline.make(_elm);
   var $false = F2(function (f,
   pred) {
      return A2(f,
      pred,
      $Basics.always(false));
   });
   var $true = F2(function (f,
   pred) {
      return A2(f,
      pred,
      $Basics.always(true));
   });
   var $for = F2(function (f,x) {
      return f(x);
   });
   var is = F2(function (f,x) {
      return f(x);
   });
   var that = F2(function (f,x) {
      return f(x);
   });
   var FailureOptions = F8(function (a,
   b,
   c,
   d,
   e,
   f,
   g,
   h) {
      return {_: {}
             ,actual: c
             ,counterExample: b
             ,expected: d
             ,name: a
             ,numberOfChecks: g
             ,numberOfShrinks: h
             ,original: e
             ,seed: f};
   });
   var SuccessOptions = F3(function (a,
   b,
   c) {
      return {_: {}
             ,name: a
             ,numberOfChecks: c
             ,seed: b};
   });
   var Multiple = F2(function (a,
   b) {
      return {ctor: "Multiple"
             ,_0: a
             ,_1: b};
   });
   var check = F3(function (claim,
   n,
   seed) {
      return function () {
         switch (claim.ctor)
         {case "Claim":
            return A2(claim._1,n,seed);
            case "Suite":
            return A2(Multiple,
              claim._0,
              A2($List.map,
              function (c) {
                 return A3(check,c,n,seed);
              },
              claim._1));}
         _U.badCase($moduleName,
         "between lines 458 and 462");
      }();
   });
   var quickCheck = function (claim) {
      return A3(check,
      claim,
      100,
      $Random.initialSeed(1));
   };
   var Unit = function (a) {
      return {ctor: "Unit",_0: a};
   };
   var Suite = F2(function (a,b) {
      return {ctor: "Suite"
             ,_0: a
             ,_1: b};
   });
   var suite = F2(function (name,
   claims) {
      return A2(Suite,name,claims);
   });
   var Claim = F2(function (a,b) {
      return {ctor: "Claim"
             ,_0: a
             ,_1: b};
   });
   var claim = F4(function (name,
   actualStatement,
   expectedStatement,
   investigator) {
      return Claim(name)(F2(function (numberOfChecks,
      seed) {
         return function () {
            var originalCounterExample$ = F2(function (seed,
            currentNumberOfChecks) {
               return _U.cmp(currentNumberOfChecks,
               numberOfChecks) > -1 ? $Trampoline.Done($Result.Ok(numberOfChecks)) : function () {
                  var $ = A2($Random.generate,
                  investigator.generator,
                  seed),
                  value = $._0,
                  nextSeed = $._1;
                  var actual = actualStatement(value);
                  var expected = expectedStatement(value);
                  return _U.eq(actual,
                  expected) ? $Trampoline.Continue(function (_v5) {
                     return function () {
                        switch (_v5.ctor)
                        {case "_Tuple0":
                           return A2(originalCounterExample$,
                             nextSeed,
                             currentNumberOfChecks + 1);}
                        _U.badCase($moduleName,
                        "on line 278, column 38 to 97");
                     }();
                  }) : $Trampoline.Done($Result.Err({ctor: "_Tuple5"
                                                    ,_0: value
                                                    ,_1: actual
                                                    ,_2: expected
                                                    ,_3: nextSeed
                                                    ,_4: currentNumberOfChecks + 1}));
               }();
            });
            var originalCounterExample = $Trampoline.trampoline(A2(originalCounterExample$,
            seed,
            0));
            return function () {
               switch (originalCounterExample.ctor)
               {case "Err":
                  switch (originalCounterExample._0.ctor)
                    {case "_Tuple5":
                       return function () {
                            var shrink = F2(function (counterExample,
                            currentNumberOfShrinks) {
                               return function () {
                                  var shrunkenCounterExamples = investigator.shrinker(counterExample);
                                  var failingShrunkenCounterExamples = A2($List.filter,
                                  function (shrunk) {
                                     return $Basics.not(_U.eq(actualStatement(shrunk),
                                     expectedStatement(shrunk)));
                                  },
                                  shrunkenCounterExamples);
                                  return function () {
                                     var _v15 = $List.head(failingShrunkenCounterExamples);
                                     switch (_v15.ctor)
                                     {case "Just":
                                        return $Trampoline.Continue(function (_v17) {
                                             return function () {
                                                switch (_v17.ctor)
                                                {case "_Tuple0":
                                                   return A2(shrink,
                                                     _v15._0,
                                                     currentNumberOfShrinks + 1);}
                                                _U.badCase($moduleName,
                                                "on line 360, column 38 to 80");
                                             }();
                                          });
                                        case "Nothing":
                                        return $Trampoline.Done({ctor: "_Tuple2"
                                                                ,_0: counterExample
                                                                ,_1: currentNumberOfShrinks});}
                                     _U.badCase($moduleName,
                                     "between lines 343 and 364");
                                  }();
                               }();
                            });
                            var $ = $Trampoline.trampoline(A2(shrink,
                            originalCounterExample._0._0,
                            0)),
                            minimal = $._0,
                            numberOfShrinks = $._1;
                            var actual = actualStatement(minimal);
                            var expected = expectedStatement(minimal);
                            return Unit($Result.Err({_: {}
                                                    ,actual: $Basics.toString(actual)
                                                    ,counterExample: $Basics.toString(minimal)
                                                    ,expected: $Basics.toString(expected)
                                                    ,name: name
                                                    ,numberOfChecks: originalCounterExample._0._4
                                                    ,numberOfShrinks: numberOfShrinks
                                                    ,original: {_: {}
                                                               ,actual: $Basics.toString(originalCounterExample._0._1)
                                                               ,counterExample: $Basics.toString(originalCounterExample._0._0)
                                                               ,expected: $Basics.toString(originalCounterExample._0._2)}
                                                    ,seed: originalCounterExample._0._3}));
                         }();}
                    break;
                  case "Ok":
                  return Unit($Result.Ok({_: {}
                                         ,name: name
                                         ,numberOfChecks: A2($Basics.max,
                                         0,
                                         originalCounterExample._0)
                                         ,seed: seed}));}
               _U.badCase($moduleName,
               "between lines 286 and 398");
            }();
         }();
      }));
   });
   var claimTrue = F2(function (name,
   predicate) {
      return A3(claim,
      name,
      predicate,
      $Basics.always(true));
   });
   var claimFalse = F2(function (name,
   predicate) {
      return A3(claim,
      name,
      predicate,
      $Basics.always(false));
   });
   var claim2 = F5(function (name,
   actualStatement,
   expectedStatement,
   specA,
   specB) {
      return A4(claim,
      name,
      function (_v19) {
         return function () {
            switch (_v19.ctor)
            {case "_Tuple2":
               return A2(actualStatement,
                 _v19._0,
                 _v19._1);}
            _U.badCase($moduleName,
            "on line 498, column 26 to 45");
         }();
      },
      function (_v23) {
         return function () {
            switch (_v23.ctor)
            {case "_Tuple2":
               return A2(expectedStatement,
                 _v23._0,
                 _v23._1);}
            _U.badCase($moduleName,
            "on line 498, column 59 to 80");
         }();
      },
      $Check$Investigator.tuple({ctor: "_Tuple2"
                                ,_0: specA
                                ,_1: specB}));
   });
   var claim2True = F2(function (name,
   predicate) {
      return A3(claim2,
      name,
      predicate,
      F2(function (_v27,_v28) {
         return function () {
            return function () {
               return true;
            }();
         }();
      }));
   });
   var claim2False = F2(function (name,
   predicate) {
      return A3(claim2,
      name,
      predicate,
      F2(function (_v31,_v32) {
         return function () {
            return function () {
               return false;
            }();
         }();
      }));
   });
   var claim3 = F6(function (name,
   actualStatement,
   expectedStatement,
   specA,
   specB,
   specC) {
      return A4(claim,
      name,
      function (_v35) {
         return function () {
            switch (_v35.ctor)
            {case "_Tuple3":
               return A3(actualStatement,
                 _v35._0,
                 _v35._1,
                 _v35._2);}
            _U.badCase($moduleName,
            "on line 510, column 29 to 50");
         }();
      },
      function (_v40) {
         return function () {
            switch (_v40.ctor)
            {case "_Tuple3":
               return A3(expectedStatement,
                 _v40._0,
                 _v40._1,
                 _v40._2);}
            _U.badCase($moduleName,
            "on line 510, column 67 to 90");
         }();
      },
      $Check$Investigator.tuple3({ctor: "_Tuple3"
                                 ,_0: specA
                                 ,_1: specB
                                 ,_2: specC}));
   });
   var claim3True = F2(function (name,
   predicate) {
      return A3(claim3,
      name,
      predicate,
      F3(function (_v45,_v46,_v47) {
         return function () {
            return function () {
               return function () {
                  return true;
               }();
            }();
         }();
      }));
   });
   var claim3False = F2(function (name,
   predicate) {
      return A3(claim3,
      name,
      predicate,
      F3(function (_v51,_v52,_v53) {
         return function () {
            return function () {
               return function () {
                  return false;
               }();
            }();
         }();
      }));
   });
   var claim4 = F7(function (name,
   actualStatement,
   expectedStatement,
   specA,
   specB,
   specC,
   specD) {
      return A4(claim,
      name,
      function (_v57) {
         return function () {
            switch (_v57.ctor)
            {case "_Tuple4":
               return A4(actualStatement,
                 _v57._0,
                 _v57._1,
                 _v57._2,
                 _v57._3);}
            _U.badCase($moduleName,
            "on line 522, column 32 to 55");
         }();
      },
      function (_v63) {
         return function () {
            switch (_v63.ctor)
            {case "_Tuple4":
               return A4(expectedStatement,
                 _v63._0,
                 _v63._1,
                 _v63._2,
                 _v63._3);}
            _U.badCase($moduleName,
            "on line 522, column 75 to 100");
         }();
      },
      $Check$Investigator.tuple4({ctor: "_Tuple4"
                                 ,_0: specA
                                 ,_1: specB
                                 ,_2: specC
                                 ,_3: specD}));
   });
   var claim4True = F2(function (name,
   predicate) {
      return A3(claim4,
      name,
      predicate,
      F4(function (_v69,
      _v70,
      _v71,
      _v72) {
         return function () {
            return function () {
               return function () {
                  return function () {
                     return true;
                  }();
               }();
            }();
         }();
      }));
   });
   var claim4False = F2(function (name,
   predicate) {
      return A3(claim4,
      name,
      predicate,
      F4(function (_v77,
      _v78,
      _v79,
      _v80) {
         return function () {
            return function () {
               return function () {
                  return function () {
                     return false;
                  }();
               }();
            }();
         }();
      }));
   });
   var claim5 = F8(function (name,
   actualStatement,
   expectedStatement,
   specA,
   specB,
   specC,
   specD,
   specE) {
      return A4(claim,
      name,
      function (_v85) {
         return function () {
            switch (_v85.ctor)
            {case "_Tuple5":
               return A5(actualStatement,
                 _v85._0,
                 _v85._1,
                 _v85._2,
                 _v85._3,
                 _v85._4);}
            _U.badCase($moduleName,
            "on line 535, column 35 to 60");
         }();
      },
      function (_v92) {
         return function () {
            switch (_v92.ctor)
            {case "_Tuple5":
               return A5(expectedStatement,
                 _v92._0,
                 _v92._1,
                 _v92._2,
                 _v92._3,
                 _v92._4);}
            _U.badCase($moduleName,
            "on line 535, column 83 to 110");
         }();
      },
      $Check$Investigator.tuple5({ctor: "_Tuple5"
                                 ,_0: specA
                                 ,_1: specB
                                 ,_2: specC
                                 ,_3: specD
                                 ,_4: specE}));
   });
   var claim5True = F2(function (name,
   predicate) {
      return A3(claim5,
      name,
      predicate,
      F5(function (_v99,
      _v100,
      _v101,
      _v102,
      _v103) {
         return function () {
            return function () {
               return function () {
                  return function () {
                     return function () {
                        return true;
                     }();
                  }();
               }();
            }();
         }();
      }));
   });
   var claim5False = F2(function (name,
   predicate) {
      return A3(claim5,
      name,
      predicate,
      F5(function (_v109,
      _v110,
      _v111,
      _v112,
      _v113) {
         return function () {
            return function () {
               return function () {
                  return function () {
                     return function () {
                        return false;
                     }();
                  }();
               }();
            }();
         }();
      }));
   });
   _elm.Check.values = {_op: _op
                       ,Claim: Claim
                       ,Suite: Suite
                       ,Unit: Unit
                       ,Multiple: Multiple
                       ,SuccessOptions: SuccessOptions
                       ,FailureOptions: FailureOptions
                       ,claim: claim
                       ,claimTrue: claimTrue
                       ,claimFalse: claimFalse
                       ,check: check
                       ,quickCheck: quickCheck
                       ,suite: suite
                       ,claim2: claim2
                       ,claim2True: claim2True
                       ,claim2False: claim2False
                       ,claim3: claim3
                       ,claim3True: claim3True
                       ,claim3False: claim3False
                       ,claim4: claim4
                       ,claim4True: claim4True
                       ,claim4False: claim4False
                       ,claim5: claim5
                       ,claim5True: claim5True
                       ,claim5False: claim5False
                       ,that: that
                       ,is: is
                       ,$for: $for
                       ,$true: $true
                       ,$false: $false};
   return _elm.Check.values;
};