Elm.Check = Elm.Check || {};
Elm.Check.Test = Elm.Check.Test || {};
Elm.Check.Test.make = function (_elm) {
   "use strict";
   _elm.Check = _elm.Check || {};
   _elm.Check.Test = _elm.Check.Test || {};
   if (_elm.Check.Test.values)
   return _elm.Check.Test.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Check.Test",
   $Basics = Elm.Basics.make(_elm),
   $Check$Investigator = Elm.Check.Investigator.make(_elm),
   $ElmTest$Assertion = Elm.ElmTest.Assertion.make(_elm),
   $ElmTest$Test = Elm.ElmTest.Test.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Trampoline = Elm.Trampoline.make(_elm);
   var assert = F5(function (name,
   predicate,
   investigator,
   numberOfTests,
   seed) {
      return function () {
         var generateTests = F4(function (seed,
         currentNumberOfTests,
         tests,
         failed) {
            return _U.cmp(currentNumberOfTests,
            numberOfTests) > -1 ? $Trampoline.Done({ctor: "_Tuple2"
                                                   ,_0: tests
                                                   ,_1: failed}) : function () {
               var $ = A2($Random.generate,
               investigator.generator,
               seed),
               value = $._0,
               nextSeed = $._1;
               var testname = $Basics.toString(value);
               var result = predicate(value);
               var test$ = A2($ElmTest$Test.test,
               testname,
               $ElmTest$Assertion.assert(result));
               var failed$ = function () {
                  switch (failed.ctor)
                  {case "Just": return failed;
                     case "Nothing":
                     return result ? $Maybe.Nothing : $Maybe.Just(value);}
                  _U.badCase($moduleName,
                  "between lines 105 and 113");
               }();
               return $Trampoline.Continue(function (_v2) {
                  return function () {
                     switch (_v2.ctor)
                     {case "_Tuple0":
                        return A4(generateTests,
                          nextSeed,
                          currentNumberOfTests + 1,
                          A2($Basics._op["++"],
                          tests,
                          _L.fromArray([test$])),
                          failed$);}
                     _U.badCase($moduleName,
                     "on line 114, column 32 to 108");
                  }();
               });
            }();
         });
         var $ = $Trampoline.trampoline(A4(generateTests,
         seed,
         0,
         _L.fromArray([]),
         $Maybe.Nothing)),
         tests = $._0,
         failed = $._1;
         return function () {
            switch (failed.ctor)
            {case "Just":
               return function () {
                    var shrink = F2(function (counterExample,
                    currentNumberOfShrinks) {
                       return function () {
                          var shrunkenCounterExamples = investigator.shrinker(counterExample);
                          var failingShrunkenCounterExamples = A2($List.filter,
                          function (shrunk) {
                             return $Basics.not(predicate(shrunk));
                          },
                          shrunkenCounterExamples);
                          return function () {
                             var _v6 = $List.head(failingShrunkenCounterExamples);
                             switch (_v6.ctor)
                             {case "Just":
                                return $Trampoline.Continue(function (_v8) {
                                     return function () {
                                        switch (_v8.ctor)
                                        {case "_Tuple0":
                                           return A2(shrink,
                                             _v6._0,
                                             currentNumberOfShrinks + 1);}
                                        _U.badCase($moduleName,
                                        "on line 137, column 34 to 76");
                                     }();
                                  });
                                case "Nothing":
                                return $Trampoline.Done({ctor: "_Tuple2"
                                                        ,_0: counterExample
                                                        ,_1: currentNumberOfShrinks});}
                             _U.badCase($moduleName,
                             "between lines 132 and 139");
                          }();
                       }();
                    });
                    var $ = $Trampoline.trampoline(A2(shrink,
                    failed._0,
                    0)),
                    minimal = $._0,
                    numberOfShrinks = $._1;
                    var testname = function () {
                       var op = _U.eq(numberOfShrinks,
                       1) ? "operation" : "operations";
                       return A2($Basics._op["++"],
                       "After ",
                       A2($Basics._op["++"],
                       $Basics.toString(numberOfShrinks),
                       A2($Basics._op["++"],
                       " shrinking ",
                       A2($Basics._op["++"],
                       op,
                       A2($Basics._op["++"],
                       " ",
                       A2($Basics._op["++"],
                       $Basics.toString(minimal),
                       " "))))));
                    }();
                    var shrinkTest = A2($ElmTest$Test.test,
                    testname,
                    $ElmTest$Assertion.assert(predicate(minimal)));
                    return A2($ElmTest$Test.suite,
                    name,
                    A2($List._op["::"],
                    shrinkTest,
                    tests));
                 }();
               case "Nothing":
               return A2($ElmTest$Test.suite,
                 name,
                 tests);}
            _U.badCase($moduleName,
            "between lines 118 and 152");
         }();
      }();
   });
   var assert2 = F4(function (name,
   predicate,
   invA,
   invB) {
      return A3(assert,
      name,
      function (_v10) {
         return function () {
            switch (_v10.ctor)
            {case "_Tuple2":
               return A2(predicate,
                 _v10._0,
                 _v10._1);}
            _U.badCase($moduleName,
            "on line 162, column 27 to 40");
         }();
      },
      $Check$Investigator.tuple({ctor: "_Tuple2"
                                ,_0: invA
                                ,_1: invB}));
   });
   var assert3 = F5(function (name,
   predicate,
   invA,
   invB,
   invC) {
      return A3(assert,
      name,
      function (_v14) {
         return function () {
            switch (_v14.ctor)
            {case "_Tuple3":
               return A3(predicate,
                 _v14._0,
                 _v14._1,
                 _v14._2);}
            _U.badCase($moduleName,
            "on line 170, column 30 to 45");
         }();
      },
      $Check$Investigator.tuple3({ctor: "_Tuple3"
                                 ,_0: invA
                                 ,_1: invB
                                 ,_2: invC}));
   });
   var assert4 = F6(function (name,
   predicate,
   invA,
   invB,
   invC,
   invD) {
      return A3(assert,
      name,
      function (_v19) {
         return function () {
            switch (_v19.ctor)
            {case "_Tuple4":
               return A4(predicate,
                 _v19._0,
                 _v19._1,
                 _v19._2,
                 _v19._3);}
            _U.badCase($moduleName,
            "on line 178, column 33 to 50");
         }();
      },
      $Check$Investigator.tuple4({ctor: "_Tuple4"
                                 ,_0: invA
                                 ,_1: invB
                                 ,_2: invC
                                 ,_3: invD}));
   });
   var assert5 = F7(function (name,
   predicate,
   invA,
   invB,
   invC,
   invD,
   invE) {
      return A3(assert,
      name,
      function (_v25) {
         return function () {
            switch (_v25.ctor)
            {case "_Tuple5":
               return A5(predicate,
                 _v25._0,
                 _v25._1,
                 _v25._2,
                 _v25._3,
                 _v25._4);}
            _U.badCase($moduleName,
            "on line 188, column 36 to 55");
         }();
      },
      $Check$Investigator.tuple5({ctor: "_Tuple5"
                                 ,_0: invA
                                 ,_1: invB
                                 ,_2: invC
                                 ,_3: invD
                                 ,_4: invE}));
   });
   var test = F6(function (name,
   actualStatement,
   expectedStatement,
   investigator,
   numberOfTests,
   seed) {
      return function () {
         var generateTests = F4(function (seed,
         currentNumberOfTests,
         tests,
         failed) {
            return _U.cmp(currentNumberOfTests,
            numberOfTests) > -1 ? $Trampoline.Done({ctor: "_Tuple2"
                                                   ,_0: tests
                                                   ,_1: failed}) : function () {
               var $ = A2($Random.generate,
               investigator.generator,
               seed),
               value = $._0,
               nextSeed = $._1;
               var testname = $Basics.toString(value);
               var test$ = A2($ElmTest$Test.test,
               testname,
               A2($ElmTest$Assertion.assertEqual,
               expectedStatement(value),
               actualStatement(value)));
               var failed$ = function () {
                  switch (failed.ctor)
                  {case "Just": return failed;
                     case "Nothing":
                     return function () {
                          var expected = expectedStatement(value);
                          var actual = actualStatement(value);
                          return _U.eq(actual,
                          expected) ? $Maybe.Nothing : $Maybe.Just(value);
                       }();}
                  _U.badCase($moduleName,
                  "between lines 34 and 47");
               }();
               return $Trampoline.Continue(function (_v34) {
                  return function () {
                     switch (_v34.ctor)
                     {case "_Tuple0":
                        return A4(generateTests,
                          nextSeed,
                          currentNumberOfTests + 1,
                          A2($Basics._op["++"],
                          tests,
                          _L.fromArray([test$])),
                          failed$);}
                     _U.badCase($moduleName,
                     "on line 48, column 32 to 108");
                  }();
               });
            }();
         });
         var $ = $Trampoline.trampoline(A4(generateTests,
         seed,
         0,
         _L.fromArray([]),
         $Maybe.Nothing)),
         tests = $._0,
         failed = $._1;
         return function () {
            switch (failed.ctor)
            {case "Just":
               return function () {
                    var shrink = F2(function (counterExample,
                    currentNumberOfShrinks) {
                       return function () {
                          var shrunkenCounterExamples = investigator.shrinker(counterExample);
                          var failingShrunkenCounterExamples = A2($List.filter,
                          function (shrunk) {
                             return $Basics.not(_U.eq(actualStatement(shrunk),
                             expectedStatement(shrunk)));
                          },
                          shrunkenCounterExamples);
                          return function () {
                             var _v38 = $List.head(failingShrunkenCounterExamples);
                             switch (_v38.ctor)
                             {case "Just":
                                return $Trampoline.Continue(function (_v40) {
                                     return function () {
                                        switch (_v40.ctor)
                                        {case "_Tuple0":
                                           return A2(shrink,
                                             _v38._0,
                                             currentNumberOfShrinks + 1);}
                                        _U.badCase($moduleName,
                                        "on line 71, column 34 to 76");
                                     }();
                                  });
                                case "Nothing":
                                return $Trampoline.Done({ctor: "_Tuple2"
                                                        ,_0: counterExample
                                                        ,_1: currentNumberOfShrinks});}
                             _U.badCase($moduleName,
                             "between lines 66 and 73");
                          }();
                       }();
                    });
                    var $ = $Trampoline.trampoline(A2(shrink,
                    failed._0,
                    0)),
                    minimal = $._0,
                    numberOfShrinks = $._1;
                    var testname = function () {
                       var op = _U.eq(numberOfShrinks,
                       1) ? "operation" : "operations";
                       return A2($Basics._op["++"],
                       "After ",
                       A2($Basics._op["++"],
                       $Basics.toString(numberOfShrinks),
                       A2($Basics._op["++"],
                       " shrinking ",
                       A2($Basics._op["++"],
                       op,
                       A2($Basics._op["++"],
                       " ",
                       A2($Basics._op["++"],
                       $Basics.toString(minimal),
                       " "))))));
                    }();
                    var shrinkTest = A2($ElmTest$Test.test,
                    testname,
                    A2($ElmTest$Assertion.assertEqual,
                    expectedStatement(minimal),
                    actualStatement(minimal)));
                    return A2($ElmTest$Test.suite,
                    name,
                    A2($List._op["::"],
                    shrinkTest,
                    tests));
                 }();
               case "Nothing":
               return A2($ElmTest$Test.suite,
                 name,
                 tests);}
            _U.badCase($moduleName,
            "between lines 52 and 86");
         }();
      }();
   });
   var test2 = F5(function (name,
   actualStatement,
   expectedStatement,
   invA,
   invB) {
      return A4(test,
      name,
      function (_v42) {
         return function () {
            switch (_v42.ctor)
            {case "_Tuple2":
               return A2(actualStatement,
                 _v42._0,
                 _v42._1);}
            _U.badCase($moduleName,
            "on line 157, column 25 to 44");
         }();
      },
      function (_v46) {
         return function () {
            switch (_v46.ctor)
            {case "_Tuple2":
               return A2(expectedStatement,
                 _v46._0,
                 _v46._1);}
            _U.badCase($moduleName,
            "on line 157, column 58 to 79");
         }();
      },
      $Check$Investigator.tuple({ctor: "_Tuple2"
                                ,_0: invA
                                ,_1: invB}));
   });
   var test3 = F6(function (name,
   actualStatement,
   expectedStatement,
   invA,
   invB,
   invC) {
      return A4(test,
      name,
      function (_v50) {
         return function () {
            switch (_v50.ctor)
            {case "_Tuple3":
               return A3(actualStatement,
                 _v50._0,
                 _v50._1,
                 _v50._2);}
            _U.badCase($moduleName,
            "on line 166, column 28 to 49");
         }();
      },
      function (_v55) {
         return function () {
            switch (_v55.ctor)
            {case "_Tuple3":
               return A3(expectedStatement,
                 _v55._0,
                 _v55._1,
                 _v55._2);}
            _U.badCase($moduleName,
            "on line 166, column 66 to 89");
         }();
      },
      $Check$Investigator.tuple3({ctor: "_Tuple3"
                                 ,_0: invA
                                 ,_1: invB
                                 ,_2: invC}));
   });
   var test4 = F7(function (name,
   actualStatement,
   expectedStatement,
   invA,
   invB,
   invC,
   invD) {
      return A4(test,
      name,
      function (_v60) {
         return function () {
            switch (_v60.ctor)
            {case "_Tuple4":
               return A4(actualStatement,
                 _v60._0,
                 _v60._1,
                 _v60._2,
                 _v60._3);}
            _U.badCase($moduleName,
            "on line 174, column 31 to 54");
         }();
      },
      function (_v66) {
         return function () {
            switch (_v66.ctor)
            {case "_Tuple4":
               return A4(expectedStatement,
                 _v66._0,
                 _v66._1,
                 _v66._2,
                 _v66._3);}
            _U.badCase($moduleName,
            "on line 174, column 74 to 99");
         }();
      },
      $Check$Investigator.tuple4({ctor: "_Tuple4"
                                 ,_0: invA
                                 ,_1: invB
                                 ,_2: invC
                                 ,_3: invD}));
   });
   var test5 = F8(function (name,
   actualStatement,
   expectedStatement,
   invA,
   invB,
   invC,
   invD,
   invE) {
      return A4(test,
      name,
      function (_v72) {
         return function () {
            switch (_v72.ctor)
            {case "_Tuple5":
               return A5(actualStatement,
                 _v72._0,
                 _v72._1,
                 _v72._2,
                 _v72._3,
                 _v72._4);}
            _U.badCase($moduleName,
            "on line 183, column 34 to 59");
         }();
      },
      function (_v79) {
         return function () {
            switch (_v79.ctor)
            {case "_Tuple5":
               return A5(expectedStatement,
                 _v79._0,
                 _v79._1,
                 _v79._2,
                 _v79._3,
                 _v79._4);}
            _U.badCase($moduleName,
            "on line 183, column 82 to 109");
         }();
      },
      $Check$Investigator.tuple5({ctor: "_Tuple5"
                                 ,_0: invA
                                 ,_1: invB
                                 ,_2: invC
                                 ,_3: invD
                                 ,_4: invE}));
   });
   _elm.Check.Test.values = {_op: _op
                            ,test: test
                            ,assert: assert
                            ,test2: test2
                            ,assert2: assert2
                            ,test3: test3
                            ,assert3: assert3
                            ,test4: test4
                            ,assert4: assert4
                            ,test5: test5
                            ,assert5: assert5};
   return _elm.Check.Test.values;
};