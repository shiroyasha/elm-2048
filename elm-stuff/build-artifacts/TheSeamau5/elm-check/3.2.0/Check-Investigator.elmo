Elm.Check = Elm.Check || {};
Elm.Check.Investigator = Elm.Check.Investigator || {};
Elm.Check.Investigator.make = function (_elm) {
   "use strict";
   _elm.Check = _elm.Check || {};
   _elm.Check.Investigator = _elm.Check.Investigator || {};
   if (_elm.Check.Investigator.values)
   return _elm.Check.Investigator.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Check.Investigator",
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Random$Array = Elm.Random.Array.make(_elm),
   $Random$Bool = Elm.Random.Bool.make(_elm),
   $Random$Char = Elm.Random.Char.make(_elm),
   $Random$Extra = Elm.Random.Extra.make(_elm),
   $Random$Function = Elm.Random.Function.make(_elm),
   $Random$List = Elm.Random.List.make(_elm),
   $Random$Maybe = Elm.Random.Maybe.make(_elm),
   $Random$Order = Elm.Random.Order.make(_elm),
   $Random$Result = Elm.Random.Result.make(_elm),
   $Random$String = Elm.Random.String.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Shrink = Elm.Shrink.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var random = function (_) {
      return _.generator;
   };
   var shrink = function (_) {
      return _.shrinker;
   };
   var investigator = F2(function (generator,
   shrinker) {
      return {_: {}
             ,generator: generator
             ,shrinker: shrinker};
   });
   var $void = A2(investigator,
   $Random$Extra.constant({ctor: "_Tuple0"}),
   $Shrink.$void);
   var bool = A2(investigator,
   $Random$Bool.bool,
   $Shrink.bool);
   var order = A2(investigator,
   $Random$Order.order,
   $Shrink.order);
   var $int = function () {
      var generator = A2($Random$Extra.frequency,
      _L.fromArray([{ctor: "_Tuple2"
                    ,_0: 3
                    ,_1: A2($Random.$int,-50,50)}
                   ,{ctor: "_Tuple2"
                    ,_0: 1
                    ,_1: A2($Random.$int,
                    $Random.minInt,
                    $Random.maxInt)}]),
      A2($Random.$int,-50,50));
      return A2(investigator,
      generator,
      $Shrink.$int);
   }();
   var rangeInt = F2(function (min,
   max) {
      return A2(investigator,
      A2($Random.$int,min,max),
      $Shrink.$int);
   });
   var $float = function () {
      var generator = A2($Random$Extra.frequency,
      _L.fromArray([{ctor: "_Tuple2"
                    ,_0: 3
                    ,_1: A2($Random.$float,-50,50)}
                   ,{ctor: "_Tuple2"
                    ,_0: 1
                    ,_1: A2($Random.$float,
                    $Basics.toFloat($Random.minInt),
                    $Basics.toFloat($Random.maxInt))}]),
      A2($Random.$float,-50,50));
      return A2(investigator,
      A2($Random.$float,-50,50),
      $Shrink.$float);
   }();
   var percentage = function () {
      var generator = A2($Random$Extra.frequency,
      _L.fromArray([{ctor: "_Tuple2"
                    ,_0: 3
                    ,_1: A2($Random.$float,0,1)}
                   ,{ctor: "_Tuple2"
                    ,_0: 1
                    ,_1: $Random$Extra.constant(0)}
                   ,{ctor: "_Tuple2"
                    ,_0: 1
                    ,_1: $Random$Extra.constant(1)}]),
      A2($Random.$float,0,1));
      return A2(investigator,
      generator,
      $Shrink.$float);
   }();
   var ascii = A2(investigator,
   $Random$Char.ascii,
   $Shrink.$char);
   var $char = A2(investigator,
   A2($Random$Char.$char,32,127),
   $Shrink.character);
   var upperCaseChar = A2(investigator,
   $Random$Char.upperCaseLatin,
   $Shrink.character);
   var lowerCaseChar = A2(investigator,
   $Random$Char.lowerCaseLatin,
   $Shrink.character);
   var unicode = A2(investigator,
   $Random$Char.unicode,
   $Shrink.$char);
   var string = A2(investigator,
   A3($Random$String.rangeLengthString,
   0,
   10,
   $Random$Char.ascii),
   $Shrink.string);
   var maybe = function (inv) {
      return A2(investigator,
      $Random$Maybe.maybe(inv.generator),
      $Shrink.maybe(inv.shrinker));
   };
   var result = F2(function (errSpec,
   valSpec) {
      return A2(investigator,
      A2($Random$Result.result,
      errSpec.generator,
      valSpec.generator),
      A2($Shrink.result,
      errSpec.shrinker,
      valSpec.shrinker));
   });
   var list = function (inv) {
      return A2(investigator,
      A3($Random$List.rangeLengthList,
      0,
      10,
      inv.generator),
      $Shrink.list(inv.shrinker));
   };
   var array = function (inv) {
      return A2(investigator,
      A3($Random$Array.rangeLengthArray,
      0,
      10,
      inv.generator),
      $Shrink.array(inv.shrinker));
   };
   var tuple = function (_v0) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return A2(investigator,
              A2($Random$Extra.zip,
              _v0._0.generator,
              _v0._1.generator),
              $Shrink.tuple({ctor: "_Tuple2"
                            ,_0: _v0._0.shrinker
                            ,_1: _v0._1.shrinker}));}
         _U.badCase($moduleName,
         "between lines 225 and 227");
      }();
   };
   var tuple3 = function (_v4) {
      return function () {
         switch (_v4.ctor)
         {case "_Tuple3":
            return A2(investigator,
              A3($Random$Extra.zip3,
              _v4._0.generator,
              _v4._1.generator,
              _v4._2.generator),
              $Shrink.tuple3({ctor: "_Tuple3"
                             ,_0: _v4._0.shrinker
                             ,_1: _v4._1.shrinker
                             ,_2: _v4._2.shrinker}));}
         _U.badCase($moduleName,
         "between lines 237 and 239");
      }();
   };
   var tuple4 = function (_v9) {
      return function () {
         switch (_v9.ctor)
         {case "_Tuple4":
            return A2(investigator,
              A4($Random$Extra.zip4,
              _v9._0.generator,
              _v9._1.generator,
              _v9._2.generator,
              _v9._3.generator),
              $Shrink.tuple4({ctor: "_Tuple4"
                             ,_0: _v9._0.shrinker
                             ,_1: _v9._1.shrinker
                             ,_2: _v9._2.shrinker
                             ,_3: _v9._3.shrinker}));}
         _U.badCase($moduleName,
         "between lines 246 and 248");
      }();
   };
   var tuple5 = function (_v15) {
      return function () {
         switch (_v15.ctor)
         {case "_Tuple5":
            return A2(investigator,
              A5($Random$Extra.zip5,
              _v15._0.generator,
              _v15._1.generator,
              _v15._2.generator,
              _v15._3.generator,
              _v15._4.generator),
              $Shrink.tuple5({ctor: "_Tuple5"
                             ,_0: _v15._0.shrinker
                             ,_1: _v15._1.shrinker
                             ,_2: _v15._2.shrinker
                             ,_3: _v15._3.shrinker
                             ,_4: _v15._4.shrinker}));}
         _U.badCase($moduleName,
         "between lines 256 and 258");
      }();
   };
   var func = function (invB) {
      return A2(investigator,
      $Random$Function.func(invB.generator),
      $Shrink.noShrink);
   };
   var func2 = function (invC) {
      return A2(investigator,
      $Random$Function.func2(invC.generator),
      $Shrink.noShrink);
   };
   var func3 = function (invD) {
      return A2(investigator,
      $Random$Function.func3(invD.generator),
      $Shrink.noShrink);
   };
   var func4 = function (invE) {
      return A2(investigator,
      $Random$Function.func4(invE.generator),
      $Shrink.noShrink);
   };
   var func5 = function (invF) {
      return A2(investigator,
      $Random$Function.func5(invF.generator),
      $Shrink.noShrink);
   };
   var Investigator = F2(function (a,
   b) {
      return {_: {}
             ,generator: a
             ,shrinker: b};
   });
   _elm.Check.Investigator.values = {_op: _op
                                    ,Investigator: Investigator
                                    ,investigator: investigator
                                    ,$void: $void
                                    ,bool: bool
                                    ,order: order
                                    ,$int: $int
                                    ,rangeInt: rangeInt
                                    ,$float: $float
                                    ,percentage: percentage
                                    ,ascii: ascii
                                    ,$char: $char
                                    ,upperCaseChar: upperCaseChar
                                    ,lowerCaseChar: lowerCaseChar
                                    ,unicode: unicode
                                    ,string: string
                                    ,maybe: maybe
                                    ,result: result
                                    ,list: list
                                    ,array: array
                                    ,tuple: tuple
                                    ,tuple3: tuple3
                                    ,tuple4: tuple4
                                    ,tuple5: tuple5
                                    ,func: func
                                    ,func2: func2
                                    ,func3: func3
                                    ,func4: func4
                                    ,func5: func5
                                    ,shrink: shrink
                                    ,random: random};
   return _elm.Check.Investigator.values;
};